{
	"info": {
		"_postman_id": "6c397020-76ef-47d9-8195-60a5febff7af",
		"name": "SDS OneRoster V1.1-OAuth2",
		"description": "OneRosterï¿½ API version 1.1 spec is availble here: \nhttps://www.imsglobal.org/oneroster-v11-final-specification",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20841326"
	},
	"item": [
		{
			"name": "APIs required for SDS Classic",
			"item": [
				{
					"name": "Get OAuth2 Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Get OAuth 2 Access Token\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if(responseCode.code === 200)",
									"{",
									"    pm.environment.set(\"OAuth2AccessToken\", data.access_token);   // \"Bearer \" + ",
									"    pm.environment.set(\"OAuth2RefreshToken\", data.refresh_token);",
									"    tests[\"Parse access token\"] = true;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{OneRosterConsumerSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{OneRosterConsumerKey}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{OneRosterConsumerKey}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_secret",
									"value": "{{OneRosterConsumerSecret}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "{{Scopes}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{Oauth2TokenAddress}}",
							"host": [
								"{{Oauth2TokenAddress}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "status='active'",
									"description": "Filters for active records",
									"disabled": true
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get Schools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"//tests[\"Get Schools\"] = responseCode.code === 200;",
									"pm.test(\"Schools Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime); //pm.environment.get(\"maxResponseTime\") needs to be int",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.schools !== null && data.schools !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.schools)) {",
									"\t\t\t\t\tretArray = data.schools;",
									"\t\t\t\t\ttests[\"Schools is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Schools is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.orgs !== null && data.orgs !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.orgs)) {",
									"\t\t\t\t\tretArray = data.orgs;",
									"\t\t\t\t\ttests[\"Orgs is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Orgs is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of schools or orgs\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"School Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require school.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require school.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.name\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('name');",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.type\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('type');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require org school.type valid values\", function () {",
									"\t\t\tpm.expect(ret0.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"",
									"",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools?offset=0&limit=100&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get Schools - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"",
									"// response 200",
									"//tests[\"Get Schools\"] = responseCode.code === 200;",
									"pm.test(\"Schools Paging Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.schools !== null && data.schools !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.schools)) {",
									"\t\t\t\t\tretArray = data.schools;",
									"\t\t\t\t\ttests[\"Schools is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Schools is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.orgs !== null && data.orgs !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.orgs)) {",
									"\t\t\t\t\tretArray = data.orgs;",
									"\t\t\t\t\ttests[\"Orgs is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Orgs is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of schools or orgs\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length > 0)",
									"\t\t\tret0 = retArray[0]",
									"\t\telse",
									"\t\t\tpm.test(\"School Array empty -- not enough records to test paging\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// if sourcedId here == sourcedId saved in environment, ",
									"\t\t// we suspect that all pages are returning same data.",
									"",
									"\t\tpm.test(\"School Paging Check -- unique sourcedId\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"school_id\"));",
									"\t\t});",
									"",
									"",
									"\t} // validations",
									"",
									"",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools?offset=2&limit=1&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools"
							],
							"query": [
								{
									"key": "offset",
									"value": "2",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get School by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ret0 = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"// response 200\r",
									"//tests[\"Get Schools\"] = responseCode.code === 200;\r",
									"pm.test(\"School by ID Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array (could be orgs os schools)\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.school !== null && data.school !== undefined):\r",
									"\t\t\t{\t\t\t\t\r",
									"\t\t\t\tret0 = data.school;\r",
									"                break;\r",
									"\t\t\t\t\t\t}\r",
									"\r",
									"\t\tcase (data.org !== null && data.org !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tret0 = data.org;\r",
									"                break;\r",
									"\t\t\t}\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\tpm.test(\"Require object of school or org\", function () {\r",
									"\t\tpm.expect(ret0).to.be.an('object');\r",
									"\t});\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require school.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require school.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require school.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require school.name\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('name');\r",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require school.type\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('type');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require org school.type valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require school.identifier\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');\r",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}"
							]
						},
						"description": "Gets a school by ID"
					},
					"response": []
				},
				{
					"name": "Get Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchool = undefined;",
									"var retTermsArray = undefined;",
									"var retTerm = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"pm.test(\"Classes Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array ",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.classes !== null && data.classes !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.classes)) {",
									"\t\t\t\t\tretArray = data.classes;",
									"\t\t\t\t\ttests[\"Classes is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Classes is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of classes\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Class Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require class.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require class.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.title\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('title');",
									"\t\t\tpm.expect(ret0.title).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object",
									"\t\tpm.test(\"Require class.school\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('school');",
									"\t\t\tretSchool = ret0.school;",
									"\t\t});",
									"\t\t// school is a nested object -- schoolSourcedId",
									"\t\tpm.test(\"Require class.school.sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require class.school.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require class.school.type\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require class.school.type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);",
									"\t\t});",
									"",
									"",
									"\t\t// terms is a nested array",
									"\t\tpm.test(\"Require class.terms\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('terms');",
									"\t\t\tretTermsArray = ret0.terms;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of class.terms\", function () {",
									"\t\t\tpm.expect(retTermsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"class.terms array is not empty\", function () {",
									"\t\t\tpm.expect(retTermsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retTermsArray != undefined) {",
									"\t\t\tif (retTermsArray.length >= 0)",
									"\t\t\t\tretTerm = retTermsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// terms validations",
									"\tif (retTerm != undefined) {",
									"",
									"\t\t// terms is a nested array -- termSourcedId",
									"\t\tpm.test(\"Require class.terms[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retTerm).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retTerm.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require class.terms[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retTerm.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require class.terms[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retTerm).to.have.property('type');",
									"\t\t\tpm.expect(retTerm.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate term type",
									"\t\tpm.test(\"Require class.terms[0].type valid values\", function () {",
									"\t\t\tpm.expect(retTerm.type).to.be.oneOf(['academicSession', 'term', 'gradingPeriod', 'semester', 'schoolYear']);",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\tpm.environment.set(\"term_id\", retTerm.sourcedId);",
									"\t\t\tconsole.log(\"Term ID set to: \" + pm.variables.get(\"term_id\"));",
									"\t\t});",
									"",
									"    } // terms",
									"",
									"",
									"\t\t// set class id env variable",
									"\t\tpm.environment.set(\"class_id\", ret0.sourcedId);",
									"\t\tconsole.log(\"Class ID set to: \" + pm.variables.get(\"class_id\"));",
									"",
									"\t\tpm.environment.set(\"school_id\", ret0.school.sourcedId);",
									"\t\tconsole.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes"
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Classes - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchool = undefined;",
									"var retTermsArray = undefined;",
									"var retTerm = undefined;",
									"",
									"",
									"pm.test(\"Classes Paging Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array ",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.classes !== null && data.classes !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.classes)) {",
									"\t\t\t\t\tretArray = data.classes;",
									"\t\t\t\t\ttests[\"Classes is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Classes is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of classes\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length > 0)",
									"\t\t\tret0 = retArray[0]",
									"\t\telse",
									"\t\t\tpm.test(\"Class Array empty -- not enough records to test paging\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t",
									"\t\t// if sourcedId here == sourcedId saved in environment, ",
									"\t\t// we suspect that all pages are returning same data.",
									"",
									"\t\tpm.test(\"Class Paging Check -- unique sourcedId\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"class_id\"));",
									"\t\t});",
									"",
									"",
									"\t",
									"",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes?offset=2&limit=1",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Classes by School",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchool = undefined;",
									"var retTermsArray = undefined;",
									"var retTerm = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"pm.test(\"Classes by School Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array ",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.classes !== null && data.classes !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.classes)) {",
									"\t\t\t\t\tretArray = data.classes;",
									"\t\t\t\t\ttests[\"Classes is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Classes is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of classes\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Class Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require class.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.title\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('title');",
									"\t\t\tpm.expect(ret0.title).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object",
									"\t\tpm.test(\"Require class.school\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('school');",
									"\t\t\tretSchool = ret0.school;",
									"\t\t});",
									"\t\t// school is a nested object -- schoolSourcedId",
									"\t\tpm.test(\"Require class.school.sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require class.school.type\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require class.school.type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);",
									"\t\t});",
									"",
									"",
									"\t\t// terms is a nested array",
									"\t\tpm.test(\"Require class.terms\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('terms');",
									"\t\t\tretTermsArray = ret0.terms;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of class.terms\", function () {",
									"\t\t\tpm.expect(retTermsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"class.terms array is not empty\", function () {",
									"\t\t\tpm.expect(retTermsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retTermsArray != undefined) {",
									"\t\t\tif (retTermsArray.length >= 0)",
									"\t\t\t\tretTerm = retTermsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// terms validations",
									"\tif (retTerm != undefined) {",
									"",
									"\t\t// terms is a nested array -- termSourcedId",
									"\t\tpm.test(\"Require class.terms[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retTerm).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retTerm.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require class.terms[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retTerm).to.have.property('type');",
									"\t\t\tpm.expect(retTerm.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate term type",
									"\t\tpm.test(\"Require class.terms[0].type valid values\", function () {",
									"\t\t\tpm.expect(retTerm.type).to.be.oneOf(['academicSession', 'term', 'gradingPeriod', 'semester', 'schoolYear']);",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\tpm.environment.set(\"term_id\", retTerm.sourcedId);",
									"\t\t\tconsole.log(\"Term ID set to: \" + pm.variables.get(\"term_id\"));",
									"\t\t});",
									"",
									"    } // terms",
									"",
									"",
									"\t\t// set class id env variable",
									"\t\tpm.environment.set(\"class_id\", ret0.sourcedId);",
									"\t\tconsole.log(\"Class ID set to: \" + pm.variables.get(\"class_id\"));",
									"",
									"\t\tpm.environment.set(\"school_id\", ret0.school.sourcedId);",
									"\t\tconsole.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/classes?offset=0&limit=100&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"classes"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Classes by School - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"pm.test(\"Classes by School - No Records Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"/*",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"*/",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array ",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.classes !== null && data.classes !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.classes)) {",
									"\t\t\t\t\tretArray = data.classes;",
									"\t\t\t\t\ttests[\"Classes is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Classes is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of classes\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must be empty",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"Class Array is empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;",
									"\t\t});",
									"\t}\t",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/1000000/classes?offset=0&limit=100&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"1000000",
								"classes"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Classes by School - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchool = undefined;",
									"var retTermsArray = undefined;",
									"var retTerm = undefined;",
									"",
									"",
									"pm.test(\"Classes Paging Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array ",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.classes !== null && data.classes !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.classes)) {",
									"\t\t\t\t\tretArray = data.classes;",
									"\t\t\t\t\ttests[\"Classes is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Classes is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of classes\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length > 0)",
									"\t\t\tret0 = retArray[0]",
									"\t\telse",
									"\t\t\tpm.test(\"Class Array empty -- not enough records to test paging\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t",
									"\t\t// if sourcedId here == sourcedId saved in environment, ",
									"\t\t// we suspect that all pages are returning same data.",
									"",
									"\t\tpm.test(\"Class Paging Check -- unique sourcedId\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"class_id\"));",
									"\t\t});",
									"",
									"",
									"\t",
									"",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/classes?offset=2&limit=1&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"classes"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Class by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ret0 = undefined;\r",
									"var retSchool = undefined;\r",
									"var retTermsArray = undefined;\r",
									"var retTerm = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"Class by ID Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.class !== null && data.class !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tret0 = data.class;\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\tpm.test(\"Require object of class\", function () {\r",
									"\t\tpm.expect(ret0).to.be.an('object');\r",
									"\t});\r",
									"\r",
									"\t\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require class.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require class.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require class.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require class.title\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('title');\r",
									"\t\t\tpm.expect(ret0.title).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object\r",
									"\t\tpm.test(\"Require class.school\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('school');\r",
									"\t\t\tretSchool = ret0.school;\r",
									"\t\t});\r",
									"\t\t// school is a nested object -- schoolSourcedId\r",
									"\t\tpm.test(\"Require class.school.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require class.school.type\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require class.school.type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\t\t// terms is a nested array\r",
									"\t\tpm.test(\"Require class.terms\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('terms');\r",
									"\t\t\tretTermsArray = ret0.terms;\r",
									"\t\t});\r",
									"\r",
									"\t\t// terms is array\r",
									"\t\tpm.test(\"Require array of class.terms\", function () {\r",
									"\t\t\tpm.expect(retTermsArray).to.be.an('array');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Class.terms array is not empty\", function () {\r",
									"\t\t\tpm.expect(retTermsArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\r",
									"\t\tif (retTermsArray != undefined) {\r",
									"\t\t\tif (retTermsArray.length >= 0)\r",
									"\t\t\t\tretTerm = retTermsArray[0]\r",
									"\t\t}\r",
									"\r",
									"\t\r",
									"\t// terms validations\r",
									"\tif (retTerm != undefined) {\r",
									"\r",
									"\t\t// terms is a nested array -- termSourcedId\r",
									"\t\tpm.test(\"Require class.terms[0].sourcedId\", function () {\r",
									"\t\t\tpm.expect(retTerm).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retTerm.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require class.term[0].sourcedId\", function () {\r",
									"\t\t\tpm.expect(retTerm).to.have.property('type');\r",
									"\t\t\tpm.expect(retTerm.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate term type\r",
									"\t\tpm.test(\"Require class.term[0].type valid values\", function () {\r",
									"\t\t\tpm.expect(retTerm.type).to.be.oneOf(['academicSession', 'term', 'gradingPeriod', 'semester', 'schoolYear']);\r",
									"\r",
									"\t\t\t// set term id env variable\r",
									"\t\t\tpm.environment.set(\"term_id\", retTerm.sourcedId);\r",
									"\t\t\tconsole.log(\"Term ID set to: \" + pm.variables.get(\"term_id\"));\r",
									"\t\t});\r",
									"\r",
									"    } // terms\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes/{{class_id}}",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes",
								"{{class_id}}"
							]
						},
						"description": "Gets a class by ID"
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Users Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"User Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require user.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require user.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"// email is not required",
									"        //  pm.test(\"Require email\", function () {",
									"\t\t//\tpm.expect(ret0).to.have.property('email');",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');",
									"\t\t//});",
									"",
									"\t\tpm.test(\"Require user.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"// schools is a nested array",
									"\t\tpm.test(\"Require user.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretSchoolsArray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of user.orgs\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"User orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retSchoolsArray != undefined) {",
									"\t\t\tif (retSchoolsArray.length >= 0)",
									"\t\t\t\tretSchool = retSchoolsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// school validations",
									"\tif (retSchool != undefined) {",
									"",
									"\t\t// user org is a nested array ",
									"\t\tpm.test(\"Require user.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require user.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require user.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require org user.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t});",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"\t\t//});",
									"",
									"    } // schools",
									"",
									"",
									"        if (ret0.sourcedId !== null && ret0.sourcedId !== undefined)",
									"        {",
									"            pm.environment.set(\"user_id\", ret0.sourcedId);",
									"            console.log(\"User ID set to: \" + pm.variables.get(\"user_id\"));",
									"",
									"        } // users sourcedid not null",
									"",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Users - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Users - No Records Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"/*",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"*/",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must be empty",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"User Array is empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;",
									"\t\t});",
									"\t}",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?filter=status='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "status='norecords'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Students Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.students !== null && data.students !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.students)) {",
									"\t\t\t\t\tretArray = data.students;",
									"\t\t\t\t\ttests[\"Students is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Students is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or students\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Student Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require student.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require student.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require username without @\", function () {",
									"            pm.expect(ret0.username).to.not.contain('@'); //SDS adds second domain",
									"\t\t});",
									"",
									"// email is not required",
									"        //  pm.test(\"Require email\", function () {",
									"\t\t//\tpm.expect(ret0).to.have.property('email');",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');",
									"\t\t//});",
									"",
									"\t\tpm.test(\"Require student.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"// schools is a nested array",
									"\t\tpm.test(\"Require student.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretSchoolsArray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of student.orgs\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Student orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retSchoolsArray != undefined) {",
									"\t\t\tif (retSchoolsArray.length >= 0)",
									"\t\t\t\tretSchool = retSchoolsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// school validations",
									"\tif (retSchool != undefined) {",
									"",
									"\t\t// student org is a nested array ",
									"\t\tpm.test(\"Require student.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require student.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require student.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require org student.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t});",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"\t\t//});",
									"",
									"    } // schools",
									"",
									"",
									"        if (ret0.sourcedId !== null && ret0.sourcedId !== undefined)",
									"        {",
									"            pm.environment.set(\"student_id\", ret0.sourcedId);",
									"            console.log(\"Student ID set to: \" + pm.variables.get(\"student_id\"));",
									"",
									"        } // students sourcedid not null",
									"",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/students?filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"students"
							],
							"query": [
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Students - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Students - No Records Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"/*",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"*/",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.students !== null && data.students !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.students)) {",
									"\t\t\t\t\tretArray = data.students;",
									"\t\t\t\t\ttests[\"Students is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Students is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or students\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must be empty",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"Student Array is empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;",
									"\t\t});",
									"\t}\t",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/students?filter=username='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"students"
							],
							"query": [
								{
									"key": "filter",
									"value": "username='norecords'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Students - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"",
									"// response 200",
									"pm.test(\"Students Paging Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.students !== null && data.students !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.students)) {",
									"\t\t\t\t\tretArray = data.students;",
									"\t\t\t\t\ttests[\"Students is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Students is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or students\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length > 0)",
									"\t\t\tret0 = retArray[0]",
									"\t\telse",
									"\t\t\t\tpm.test(\"Student Array empty -- not enough records to test paging\", function () {",
									"\t\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require student.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// if sourcedId here == sourcedId saved in environment, ",
									"\t\t// we suspect that all pages are returning same data.",
									"",
									"\t\tpm.test(\"Student Paging Check -- unique sourcedId\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"student_id\"));",
									"\t\t});",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/students?offset=2&limit=1",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"students"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Student by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ret0 = undefined;\r",
									"var retSchoolsArray = undefined;\r",
									"var retSchool = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"// response 200\r",
									"pm.test(\"Students by ID Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array (could be orgs os schools)\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.user !== null && data.user !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tret0 = data.user;\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\tcase (data.student !== null && data.student !== undefined):\r",
									"            {\r",
									"\t\t\t\tret0 = data.student;\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"    pm.test(\"Require object of student or user\", function () {\r",
									"\t\tpm.expect(ret0).to.be.an('object');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require student.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require student.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require student.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require student.username\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('username');\r",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require username without @\", function () {\r",
									"            pm.expect(ret0.username).to.not.contain('@'); //SDS adds second domain\r",
									"\t\t});\r",
									"\r",
									"// email is not required\r",
									"        //  pm.test(\"Require student.email\", function () {\r",
									"\t\t//\tpm.expect(ret0).to.have.property('email');\r",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');\r",
									"\t\t//});\r",
									"\r",
									"\t\tpm.test(\"Require student.givenName\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require student.identifier\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');\r",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"// schools is a nested array\r",
									"\t\tpm.test(\"Require orgs\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');\r",
									"\t\t\tretSchoolsArray = ret0.orgs;\r",
									"\t\t});\r",
									"\r",
									"\t\t// terms is array\r",
									"\t\tpm.test(\"Require array of student.orgs\", function () {\r",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Student.orgs array is not empty\", function () {\r",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\r",
									"\t\tif (retSchoolsArray != undefined) {\r",
									"\t\t\tif (retSchoolsArray.length >= 0)\r",
									"\t\t\t\tretSchool = retSchoolsArray[0]\r",
									"\t\t}\r",
									"\r",
									"\t\r",
									"\t// school validations\r",
									"\tif (retSchool != undefined) {\r",
									"\r",
									"\t\t// school is a nested array -\r",
									"\t\tpm.test(\"Require student.orgs[0].sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require student.orgs[0].sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require org student.orgs[0].type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);\r",
									"\t\t});\r",
									"\r",
									"\t\t\t// set term id env variable\r",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);\r",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));\r",
									"\t\t//});\r",
									"\r",
									"    } // schools\r",
									"\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/students/{{student_id}}",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"students",
								"{{student_id}}"
							]
						},
						"description": "Gets a student by ID"
					},
					"response": []
				},
				{
					"name": "Get Students by School",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Students Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.students !== null && data.students !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.students)) {",
									"\t\t\t\t\tretArray = data.students;",
									"\t\t\t\t\ttests[\"Students is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Students is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or students\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Student Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require student.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require student.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require username without @\", function () {",
									"            pm.expect(ret0.username).to.not.contain('@'); //SDS adds second domain",
									"\t\t});",
									"        ",
									"// email is not required",
									"        //  pm.test(\"Require email\", function () {",
									"\t\t//\tpm.expect(ret0).to.have.property('email');",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');",
									"\t\t//});",
									"",
									"\t\tpm.test(\"Require student.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"// schools is a nested array",
									"\t\tpm.test(\"Require student.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretSchoolsArray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of student.orgs\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Student orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retSchoolsArray != undefined) {",
									"\t\t\tif (retSchoolsArray.length >= 0)",
									"\t\t\t\tretSchool = retSchoolsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// school validations",
									"\tif (retSchool != undefined) {",
									"",
									"\t\t// student org is a nested array ",
									"\t\tpm.test(\"Require student.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require student.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require student.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require org student.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t});",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"\t\t//});",
									"",
									"    } // schools",
									"",
									"",
									"        if (ret0.sourcedId !== null && ret0.sourcedId !== undefined)",
									"        {",
									"            pm.environment.set(\"student_id\", ret0.sourcedId);",
									"            console.log(\"Student ID set to: \" + pm.variables.get(\"student_id\"));",
									"",
									"        } // students sourcedid not null",
									"",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/students?offset=0&limit =100&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"students"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit ",
									"value": "100"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Students by School - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"",
									"// response 200",
									"pm.test(\"Students Paging Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.students !== null && data.students !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.students)) {",
									"\t\t\t\t\tretArray = data.students;",
									"\t\t\t\t\ttests[\"Students is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Students is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or students\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length > 0)",
									"\t\t\tret0 = retArray[0]",
									"\t\telse",
									"\t\t\t\tpm.test(\"Student Array empty -- not enough records to test paging\", function () {",
									"\t\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require student.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// if sourcedId here == sourcedId saved in environment, ",
									"\t\t// we suspect that all pages are returning same data.",
									"",
									"\t\tpm.test(\"Student Paging Check -- unique sourcedId\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"student_id\"));",
									"\t\t});",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/students?offset=2&limit=1&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"students"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Teachers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Teachers Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.teachers !== null && data.teachers !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.teachers)) {",
									"\t\t\t\t\tretArray = data.teachers;",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or teachers\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Teacher array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require teacher.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require teacher.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require username without @\", function () {",
									"            pm.expect(ret0.username).to.not.contain('@'); //SDS adds second domain",
									"\t\t});",
									"        ",
									"// email is not required",
									"        //  pm.test(\"Require email\", function () {",
									"\t\t//\tpm.expect(ret0).to.have.property('email');",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');",
									"\t\t//});",
									"",
									"\t\tpm.test(\"Require teacher.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.givenName).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"// schools is a nested array",
									"\t\tpm.test(\"Require teacher.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretSchoolsArray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of teacher.orgs\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Teacher orgs Array is not empty\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retSchoolsArray != undefined) {",
									"\t\t\tif (retSchoolsArray.length >= 0)",
									"\t\t\t\tretSchool = retSchoolsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// school validations",
									"\tif (retSchool != undefined) {",
									"",
									"\t\t// school is a nested array ",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require teacher.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require org teacher.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t});",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"\t\t//});",
									"",
									"    } // schools",
									"",
									"",
									"        if (ret0.sourcedId !== null && ret0.sourcedId !== undefined)",
									"        {",
									"            pm.environment.set(\"teacher_id\", ret0.sourcedId);",
									"            console.log(\"Teacher ID set to: \" + pm.variables.get(\"teacher_id\"));",
									"",
									"        } // teacher sourcedid not null",
									"",
									"        if (ret0.email !== null && ret0.email !== undefined)",
									"        {",
									"            pm.environment.set(\"teacher_email_address\", ret0.email);",
									"            console.log(\"Teacher email set to: \" + pm.variables.get(\"teacher_email_address\"));",
									"",
									"        } // teacher email for gradesync",
									"",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/teachers?offset=0&limit=10000&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"teachers"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "10000",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of teachers."
					},
					"response": []
				},
				{
					"name": "Get Teachers - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Teachers - No Records Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"/*",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"*/",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.teachers !== null && data.teachers !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.teachers)) {",
									"\t\t\t\t\tretArray = data.teachers;",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or teachers\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must be empty",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"Teacher array is empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;",
									"\t\t});",
									"\t}\t",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/teachers?offset=0&limit=10000&filter=username='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"teachers"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "10000",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "username='norecords'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of teachers."
					},
					"response": []
				},
				{
					"name": "Get Teachers by School",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Teachers Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.teachers !== null && data.teachers !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.teachers)) {",
									"\t\t\t\t\tretArray = data.teachers;",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or teachers\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Teacher array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require teacher.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require teacher.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require username without @\", function () {",
									"            pm.expect(ret0.username).to.not.contain('@'); //SDS adds second domain",
									"\t\t});",
									"        ",
									"// email is not required",
									"        //  pm.test(\"Require email\", function () {",
									"\t\t//\tpm.expect(ret0).to.have.property('email');",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');",
									"\t\t//});",
									"",
									"\t\tpm.test(\"Require teacher.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"// schools is a nested array",
									"\t\tpm.test(\"Require teacher.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretSchoolsArray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of teacher.orgs\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Teacher orgs Array is not empty\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retSchoolsArray != undefined) {",
									"\t\t\tif (retSchoolsArray.length >= 0)",
									"\t\t\t\tretSchool = retSchoolsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// school validations",
									"\tif (retSchool != undefined) {",
									"",
									"\t\t// school is a nested array ",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require teacher.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require org teacher.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t});",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"\t\t//});",
									"",
									"    } // schools",
									"",
									"",
									"        //if (ret0.sourcedId !== null && ret0.sourcedId !== undefined)",
									"        //{",
									"//            pm.environment.set(\"teacher_id\", ret0.sourcedId);",
									"//            console.log(\"Teacher ID set to: \" + pm.variables.get(\"teacher_id\"));",
									"",
									"        //} // teacher sourcedid not null",
									"",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/teachers?offset=0&limit=10000&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"teachers"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "10000",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of teachers."
					},
					"response": []
				},
				{
					"name": "Get Teachers - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"",
									"// response 200",
									"pm.test(\"Teachers Paging Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.teachers !== null && data.teachers !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.teachers)) {",
									"\t\t\t\t\tretArray = data.teachers;",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or teachers\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length > 0)",
									"\t\t\tret0 = retArray[0]",
									"\t\telse",
									"\t\t\tpm.test(\"Teacher Array empty -- not enough records to test paging\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require teacher.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// if sourcedId here == sourcedId saved in environment, ",
									"\t\t// we suspect that all pages are returning same data.",
									"",
									"\t\tpm.test(\"Teacher Paging Check -- unique sourcedId\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"teacher_id\"));",
									"\t\t});",
									"",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/teachers?offset=2&limit=1&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"teachers"
							],
							"query": [
								{
									"key": "offset",
									"value": "2",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of teachers."
					},
					"response": []
				},
				{
					"name": "Get Teacher by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ret0 = undefined;\r",
									"var retSchoolsArray = undefined;\r",
									"var retSchool = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"// response 200\r",
									"pm.test(\"Teacher by ID Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array (could be orgs os schools)\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.user !== null && data.user !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tret0 = data.user;\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\tcase (data.teacher !== null && data.teacher !== undefined):\r",
									"            {\r",
									"\t\t\t\tret0 = data.teacher;\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"    pm.test(\"Require object of teacher or user\", function () {\r",
									"\t\tpm.expect(ret0).to.be.an('object');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require teacher.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacher.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacher.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacher.username\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('username');\r",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require username without @\", function () {\r",
									"            pm.expect(ret0.username).to.not.contain('@'); //SDS adds second domain\r",
									"\t\t});\r",
									"\r",
									"// email is not required\r",
									"        //  pm.test(\"Require teacher.email\", function () {\r",
									"\t\t//\tpm.expect(ret0).to.have.property('email');\r",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');\r",
									"\t\t//});\r",
									"\r",
									"\t\tpm.test(\"Require teacher.givenName\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');\r",
									"\t\t\tpm.expect(ret0.givenName).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacher.identifier\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');\r",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"// schools is a nested array\r",
									"\t\tpm.test(\"Require teacher.orgs\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');\r",
									"\t\t\tretSchoolsArray = ret0.orgs;\r",
									"\t\t});\r",
									"\r",
									"\t\t// terms is array\r",
									"\t\tpm.test(\"Require array of teacher.orgs\", function () {\r",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"teacher.orgs array is not empty\", function () {\r",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\r",
									"\t\tif (retSchoolsArray != undefined) {\r",
									"\t\t\tif (retSchoolsArray.length >= 0)\r",
									"\t\t\t\tretSchool = retSchoolsArray[0]\r",
									"\t\t}\r",
									"\r",
									"\t\r",
									"\t// school validations\r",
									"\tif (retSchool != undefined) {\r",
									"\r",
									"\t\t// terms is a nested array -- termSourcedId\r",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require org teacher.orgs[0]type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);\r",
									"\t\t});\r",
									"\r",
									"\t\t\t// set term id env variable\r",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);\r",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));\r",
									"\t\t//});\r",
									"\r",
									"    } // schools\r",
									"\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/teachers/{{teacher_id}}",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"teachers",
								"{{teacher_id}}"
							]
						},
						"description": "Gets a teacher by ID"
					},
					"response": []
				},
				{
					"name": "Get Student Enrollments of a School",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var retSchool = undefined;\r",
									"var retClass = undefined;\r",
									"var retUser = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"Student Enrollment of School Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Student Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"Student Enrollment Array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require studentenrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require studentenrollment.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require studentenrollment.role\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('role');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        // validate user type\r",
									"\t\tpm.test(\"Require user studentenrollment.role.valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.role).to.be.oneOf(['student']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require studentenrollment.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require studentenrollment.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// school is a nested object\r",
									"\t\tpm.test(\"Require studentenrollment.school\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('school');\r",
									"\t\t\tretSchool = ret0.school;\r",
									"\t\t});\r",
									"\t\t// school is a nested object -- schoolSourcedId\r",
									"\t\tpm.test(\"Require studentenrollment.school.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require studentenrollment.school.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require studentenrollment.type\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require school.studentenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// class is a nested object\r",
									"\t\tpm.test(\"Require studentenrollment.class\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('class');\r",
									"\t\t\tretClass = ret0.class;\r",
									"\t\t});\r",
									"\t\t// class is a nested object -- classSourcedId\r",
									"\t\tpm.test(\"Require studentenrollment.class.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require studentenrollment.class.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// class is a nested object -- type\r",
									"\t\tpm.test(\"Require studentenrollment.class.type\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('type');\r",
									"\t\t\tpm.expect(retClass.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require class studentenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retClass.type).to.be.oneOf(['class']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"// user is a nested object\r",
									"\t\tpm.test(\"Require studentenrollment.user\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('user');\r",
									"\t\t\tretUser = ret0.user;\r",
									"\t\t});\r",
									"\t\t// user is a nested object -- userSourcedId\r",
									"\t\tpm.test(\"Require studentenrollment.user.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require studentenrollment.user.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// user is a nested object -- type\r",
									"\t\tpm.test(\"Require studentenrollment.user.type\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('type');\r",
									"\t\t\tpm.expect(retUser.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate user type\r",
									"\t\tpm.test(\"Require studentenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retUser.type).to.be.oneOf(['user']);\r",
									"\t\t});\r",
									"\r",
									"        if (ret0.sourcedId !== null && ret0.sourcedId !== undefined)\r",
									"        {\r",
									"            pm.environment.set(\"student_enroll_id\", ret0.sourcedId);\r",
									"            console.log(\"Student Enroll ID set to: \" + pm.variables.get(\"student_enroll_id\"));\r",
									"\r",
									"\t\t}\r",
									"\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/enrollments?offset=0&limit=100&filter=role='student'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "role='student'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Student Enrollments of a School - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"Student Enrollment of School - No Records Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"*/\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Student Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must be empty\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"Student Enrollment Array is empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;\r",
									"\t\t});\r",
									"\t}\t\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/1000000/enrollments?offset=0&limit=100&filter=role='student'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"1000000",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "role='student'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get User Enrollments of a School",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var retSchool = undefined;\r",
									"var retClass = undefined;\r",
									"var retUser = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"User Enrollment of School Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of User Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"User Enrollment Array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.role\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('role');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        // validate user type\r",
									"\t\t// pm.test(\"Require user enrollment.role.valid values\", function () {\r",
									"\t\t\t// pm.expect(ret0.role).to.be.oneOf(['student']);\r",
									"\t\t// });\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// school is a nested object\r",
									"\t\tpm.test(\"Require enrollment.school\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('school');\r",
									"\t\t\tretSchool = ret0.school;\r",
									"\t\t});\r",
									"\t\t// school is a nested object -- schoolSourcedId\r",
									"\t\tpm.test(\"Require enrollment.school.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.school.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require enrollment.type\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require school.enrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// class is a nested object\r",
									"\t\tpm.test(\"Require enrollment.class\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('class');\r",
									"\t\t\tretClass = ret0.class;\r",
									"\t\t});\r",
									"\t\t// class is a nested object -- classSourcedId\r",
									"\t\tpm.test(\"Require enrollment.class.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.class.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// class is a nested object -- type\r",
									"\t\tpm.test(\"Require enrollment.class.type\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('type');\r",
									"\t\t\tpm.expect(retClass.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require class enrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retClass.type).to.be.oneOf(['class']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"// user is a nested object\r",
									"\t\tpm.test(\"Require enrollment.user\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('user');\r",
									"\t\t\tretUser = ret0.user;\r",
									"\t\t});\r",
									"\t\t// user is a nested object -- userSourcedId\r",
									"\t\tpm.test(\"Require enrollment.user.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.user.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// user is a nested object -- type\r",
									"\t\tpm.test(\"Require enrollment.user.type\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('type');\r",
									"\t\t\tpm.expect(retUser.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate user type\r",
									"\t\tpm.test(\"Require enrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retUser.type).to.be.oneOf(['user']);\r",
									"\t\t});\r",
									"\r",
									"        if (ret0.sourcedId !== null && ret0.sourcedId !== undefined)\r",
									"        {\r",
									"            pm.environment.set(\"enroll_id\", ret0.sourcedId);\r",
									"            console.log(\"Enroll ID set to: \" + pm.variables.get(\"enroll_id\"));\r",
									"\r",
									"\t\t}\r",
									"\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/enrollments?offset=0&limit=100",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get User Enrollments of a School - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"User Enrollment of School - No Records Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"*/\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of User Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must be empty\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"User Enrollment Array is empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/1000000/enrollments?offset=0&limit=100",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"1000000",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Student Enrollments of a School - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var retSchool = undefined;\r",
									"var retClass = undefined;\r",
									"var retUser = undefined;\r",
									"\r",
									"\r",
									"pm.test(\"Student Enrollment of School Paging Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Student Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Student Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Student Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length > 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\t\telse\r",
									"\t\t\tpm.test(\"Student Enrollment Array empty -- not enough records to test paging\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require studentenrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// if sourcedId here == sourcedId saved in environment, \r",
									"\t\t// we suspect that all pages are returning same data.\r",
									"\r",
									"\t\tpm.test(\"Student Enrollment Paging Check -- unique sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"student_enroll_id\"));\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/enrollments?offset=2&limit=1&filter=role='student'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "2",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "role='student'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Teacher Enrollments of a School",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var retSchool = undefined;\r",
									"var retClass = undefined;\r",
									"var retUser = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"Teacher Enrollment of School Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Teacher Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Teacher Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Teacher Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"Teacher Enrollment Array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require teacherenrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require teacherenrollment.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacherenrollment.role\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('role');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        // validate user type\r",
									"\t\tpm.test(\"Require user teacherenrollment.role valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.role).to.be.oneOf(['teacher']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacherenrollment.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacherenrollment.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// school is a nested object\r",
									"\t\tpm.test(\"Require school\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('school');\r",
									"\t\t\tretSchool = ret0.school;\r",
									"\t\t});\r",
									"\t\t// school is a nested object -- schoolSourcedId\r",
									"\t\tpm.test(\"Require teacherenrollment.school.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require teacherenrollment.school.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require teacherenrollment.school.type\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require school teacherenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// class is a nested object\r",
									"\t\tpm.test(\"Require teacherenrollment.class\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('class');\r",
									"\t\t\tretClass = ret0.class;\r",
									"\t\t});\r",
									"\t\t// class is a nested object -- classSourcedId\r",
									"\t\tpm.test(\"Require teacherenrollment.class.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require teacherenrollment.class.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// class is a nested object -- type\r",
									"\t\tpm.test(\"Require teacherenrollment.class.type\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('type');\r",
									"\t\t\tpm.expect(retClass.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require class teacherenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retClass.type).to.be.oneOf(['class']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"// user is a nested object\r",
									"\t\tpm.test(\"Require teacherenrollment.user\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('user');\r",
									"\t\t\tretUser = ret0.user;\r",
									"\t\t});\r",
									"\t\t// user is a nested object -- userSourcedId\r",
									"\t\tpm.test(\"Require teacherenrollment.user.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require teacherenrollment.user.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// user is a nested object -- type\r",
									"\t\tpm.test(\"Require teacherenrollment.user.type\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('type');\r",
									"\t\t\tpm.expect(retUser.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate user type\r",
									"\t\tpm.test(\"Require user teacherenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retUser.type).to.be.oneOf(['user']);\r",
									"\t\t});\r",
									"\r",
									"\t\tif (ret0.sourcedId !== null && ret0.sourcedId !== undefined)\r",
									"        {\r",
									"            pm.environment.set(\"teacher_enroll_id\", ret0.sourcedId);\r",
									"            console.log(\"Teacher Enroll ID set to: \" + pm.variables.get(\"teacher_enroll_id\"));\r",
									"\r",
									"\t\t}\r",
									"\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/enrollments?offset=0&limit=100&filter=role='teacher'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "role='teacher'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Teacher Enrollments of a School - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"Teacher Enrollment of School - No Records Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"*/\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Teacher Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Teacher Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Teacher Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must be empty\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"Teacher Enrollment Array is empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;\r",
									"\t\t});\r",
									"\t}\t\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/1000000/enrollments?offset=0&limit=100&filter=role='teacher'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"1000000",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "role='teacher'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Teacher Enrollments of a School - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var retSchool = undefined;\r",
									"var retClass = undefined;\r",
									"var retUser = undefined;\r",
									"\r",
									"\r",
									"pm.test(\"Teacher Enrollment of School Paging Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Teacher Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Teacher Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length > 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\t\telse\r",
									"\t\t\tpm.test(\"Teacher Enrollment Array empty -- not enough records to test paging\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require teacherenrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\t\t// if sourcedId here == sourcedId saved in environment, \r",
									"\t\t// we suspect that all pages are returning same data.\r",
									"\r",
									"\t\tpm.test(\"Teacher Enrollment Paging Check -- unique sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"teacher_enroll_id\"));\r",
									"\t\t});\r",
									"\r",
									"\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/enrollments?offset=2&limit=1&filter=role='teacher'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "2",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "role='teacher'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Academic Sessions (Terms)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"// response 200\r",
									"//tests[\"Get Schools\"] = responseCode.code === 200;\r",
									"pm.test(\"Academic Sessions Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Environment Variable SchoolYear is set\", function() {\r",
									"\tvar sy = pm.variables.get(\"SchoolYear\");\r",
									"\tpm.expect(sy.isNaN);\r",
									"\tpm.expect(sy).to.not.be.eql('');\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\t\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array (could be orgs os schools)\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.academicSessions !== null && data.academicSessions !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.academicSessions)) {\r",
									"\t\t\t\t\tretArray = data.academicSessions;\r",
									"\t\t\t\t\ttests[\"academicSessions is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"academicSessions is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\t\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of academicSessions\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"AcademicSessions Array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require academicSession.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.title\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('title');\r",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.type\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('type');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.schoolYear\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('schoolYear');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require academicSession.schoolYear to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.schoolYear).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.schoolYear to be numeric\", function () {\r",
									"\t\t\tpm.expect(isNaN(ret0.schoolYear)).is.false;\r",
									"\t\t\tpm.expect(ret0.schoolYear.toString()).to.have.length(4);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.type valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.type).to.be.oneOf(['gradingPeriod','semester','schoolYear','term']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.startDate\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('startDate');\r",
									"\t\t\tpm.expect(ret0.startDate).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        if (ret0.startDate !== null && ret0.startDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require academicSession.startDate format\", function () {\r",
									"                pm.expect(moment(ret0.startDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"        if (ret0.endDate !== null && ret0.endDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require academicSession.endDate format\", function () {\r",
									"                pm.expect(moment(ret0.endDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/academicSessions?offset=0&limit=100",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"academicSessions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "schoolYear='{{SchoolYear}}' AND status='active'",
									"disabled": true
								}
							]
						},
						"description": "Gets a page of academic sessions. Academic sessions can be of type \"School Year\", Term\", \"Semester\", \"GradingPeriod\""
					},
					"response": []
				},
				{
					"name": "Get Academic Sessions (Terms) - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"// response 200\r",
									"//tests[\"Get Schools\"] = responseCode.code === 200;\r",
									"pm.test(\"Academic Sessions - No Records Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Environment Variable SchoolYear is set\", function() {\r",
									"\tvar sy = pm.variables.get(\"SchoolYear\");\r",
									"\tpm.expect(sy.isNaN);\r",
									"\tpm.expect(sy).to.not.be.eql('');\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\t\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"*/\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array (could be orgs os schools)\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.academicSessions !== null && data.academicSessions !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.academicSessions)) {\r",
									"\t\t\t\t\tretArray = data.academicSessions;\r",
									"\t\t\t\t\ttests[\"academicSessions is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"academicSessions is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\t\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of academicSessions\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must be empty\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"AcademicSessions Array is empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;\r",
									"\t\t});\r",
									"\t}\t\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/academicSessions?offset=0&limit=100&filter=title='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"academicSessions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "filter",
									"value": "title='norecords'"
								}
							]
						},
						"description": "Gets a page of academic sessions. Academic sessions can be of type \"School Year\", Term\", \"Semester\", \"GradingPeriod\""
					},
					"response": []
				},
				{
					"name": "Get Academic Sessions (Terms)  - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"\r",
									"// response 200\r",
									"//tests[\"Get Schools\"] = responseCode.code === 200;\r",
									"pm.test(\"Academic Sessions Paging Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Environment Variable SchoolYear is set\", function() {\r",
									"\tvar sy = pm.variables.get(\"SchoolYear\");\r",
									"\tpm.expect(sy.isNaN);\r",
									"\tpm.expect(sy).to.not.be.eql('');\r",
									"});\r",
									"\t\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array (could be orgs os schools)\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.academicSessions !== null && data.academicSessions !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.academicSessions)) {\r",
									"\t\t\t\t\tretArray = data.academicSessions;\r",
									"\t\t\t\t\ttests[\"Academic Sessions is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Academic Sessions is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\t\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Academic Sessions\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length > 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\t\telse\r",
									"\t\t\tpm.test(\"Academic Sessions empty -- not enough records to test paging\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t\t// if sourcedId here == sourcedId saved in environment, \r",
									"\t\t// we suspect that all pages are returning same data.\r",
									"\r",
									"\t\tpm.test(\"academicSession Paging Check -- unique sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"term_id\"));\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/academicSessions?offset=2&limit=1&filter=schoolYear='{{SchoolYear}}' AND status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"academicSessions"
							],
							"query": [
								{
									"key": "offset",
									"value": "2",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "schoolYear='{{SchoolYear}}' AND status='active'"
								}
							]
						},
						"description": "Gets a page of academic sessions. Academic sessions can be of type \"School Year\", Term\", \"Semester\", \"GradingPeriod\""
					},
					"response": []
				},
				{
					"name": "Get AcademicSessions by Term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"// response 200\r",
									"//tests[\"Get Schools\"] = responseCode.code === 200;\r",
									"pm.test(\"Academic Session by ID Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the object\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.academicSession !== null && data.academicSession !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tret0 = data.academicSession;\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\t\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"Require object of academicSession\", function () {\r",
									"\t\tpm.expect(ret0).to.be.an('object');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.title\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('title');\r",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.type\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('type');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.type valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.type).to.be.oneOf(['gradingPeriod','semester','schoolYear','term']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.startDate\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('startDate');\r",
									"\t\t\tpm.expect(ret0.startDate).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        if (ret0.startDate !== null && ret0.startDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require academicSession.startDate format\", function () {\r",
									"                pm.expect(moment(ret0.startDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"        if (ret0.endDate !== null && ret0.endDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require academicSession.endDate format\", function () {\r",
									"                pm.expect(moment(ret0.endDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.schoolYear to be numeric\", function () {\r",
									"\t\t\t//pm.expect(ret0.schoolYear).to.be.a('number');\r",
									"\t\t\tpm.expect(isNaN(ret0.schoolYear)).is.false;\r",
									"\t\t\tpm.expect(ret0.schoolYear).to.have.length(4);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/academicSessions/{{term_id}}",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"academicSessions",
								"{{term_id}}"
							]
						},
						"description": "Gets a teacher by ID"
					},
					"response": []
				},
				{
					"name": "Get Term by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"// response 200\r",
									"//tests[\"Get Schools\"] = responseCode.code === 200;\r",
									"pm.test(\"Term by ID Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the object\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.academicSession !== null && data.academicSession !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tret0 = data.academicSession;\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\t\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"Require object of term\", function () {\r",
									"\t\tpm.expect(ret0).to.be.an('object');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require term.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require term.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require term.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require term.title\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('title');\r",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require term.type\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('type');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require term.type valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.type).to.be.oneOf(['gradingPeriod','semester','schoolYear','term']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require term.startDate\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('startDate');\r",
									"\t\t\tpm.expect(ret0.startDate).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        if (ret0.startDate !== null && ret0.startDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require term.startDate format\", function () {\r",
									"                pm.expect(moment(ret0.startDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"        if (ret0.endDate !== null && ret0.endDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require term.endDate format\", function () {\r",
									"                pm.expect(moment(ret0.endDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"\t\tpm.test(\"Require term.schoolYear to be numeric\", function () {\r",
									"\t\t\t//pm.expect(ret0.schoolYear).to.be.a('number');\r",
									"\t\t\tpm.expect(isNaN(ret0.schoolYear)).is.false;\r",
									"\t\t\tpm.expect(ret0.schoolYear).to.have.length(4);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/terms/{{term_id}}",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"terms",
								"{{term_id}}"
							]
						},
						"description": "Gets a teacher by ID"
					},
					"response": []
				},
				{
					"name": "Get User by Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Expects Teacher Email to be provided as environment variable\r",
									"if (!pm.environment.get(\"TeacherEmailAddress\"))\r",
									"{\r",
									"    console.log(\"Missing Teacher Email Address, It is required to be added in pm.environment\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//tests[\"Get User from Email\"] = responseCode.code === 200;\r",
									"\r",
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var retSchoolsArray = undefined;\r",
									"var retSchool = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"\r",
									"if (!pm.environment.get(\"teacher_email_address\"))\r",
									"{\r",
									"    console.log(\"Please add value for teacher_email_address in environment variables\")\r",
									"}\r",
									"// response 200\r",
									"pm.test(\"Users Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"// test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array (could be orgs os schools)\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.users !== null && data.users !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.users)) {\r",
									"\t\t\t\t\tretArray = data.users;\r",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\tcase (data.users !== null && data.users !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.users)) {\r",
									"\t\t\t\t\tretArray = data.users;\r",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of users\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"User Array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"    \tpm.test(\"Teacher array is exactly 1 record matching email\", function () {\r",
									"\t\t\tpm.expect(retArray.length).to.be.eql(1);\r",
									"\t\t});\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require user.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require user.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require user.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require user.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require user.username\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('username');\r",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"         pm.test(\"Require email\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('email');\r",
									"\t\t\tpm.expect(ret0.email).to.not.be.eql('');\r",
									"            pm.expect(ret0.email).to.not.be.an('array');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require user.givenName\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require user.identifier\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');\r",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"// schools is a nested array\r",
									"\t\tpm.test(\"Require user.orgs\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');\r",
									"\t\t\tretSchoolsArray = ret0.orgs;\r",
									"\t\t});\r",
									"\r",
									"\t\t// terms is array\r",
									"\t\tpm.test(\"Require array of user.orgs\", function () {\r",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"User orgs array is not empty\", function () {\r",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\r",
									"\t\tif (retSchoolsArray != undefined) {\r",
									"\t\t\tif (retSchoolsArray.length >= 0)\r",
									"\t\t\t\tretSchool = retSchoolsArray[0]\r",
									"\t\t}\r",
									"\r",
									"\t\r",
									"\t// school validations\r",
									"\tif (retSchool != undefined) {\r",
									"\r",
									"\t\t// user org is a nested array \r",
									"\t\tpm.test(\"Require user.orgs[0].sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require user.orgs[0].sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require user.orgs[0].sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require org user.orgs[0].type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);\r",
									"\t\t});\r",
									"\r",
									"\t\t\t// set term id env variable\r",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);\r",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));\r",
									"\t\t//});\r",
									"\r",
									"    } // schools\r",
									"\r",
									"\r",
									"        if (ret0.sourcedId !== null && ret0.sourcedId !== undefined)\r",
									"        {\r",
									"            pm.environment.set(\"user_id\", ret0.sourcedId);\r",
									"            console.log(\"User ID set to: \" + pm.variables.get(\"user_id\"));\r",
									"\r",
									"        } // users sourcedid not null\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?filter=email='{{teacher_email_address}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "email='{{teacher_email_address}}'"
								}
							]
						},
						"description": "Gets a user by email"
					},
					"response": []
				},
				{
					"name": "Get Teacher by Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//tests[\"Get Teacher from Email\"] = responseCode.code === 200;",
									"",
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"var teaAddrParam = true;",
									"var teaAddr = pm.variables.get(\"teacher_email_address\");",
									"",
									"",
									"",
									"if ((teaAddr == undefined) || (teaAddr == \"\")) {",
									"    teaAddrParam = false",
									"}",
									"",
									"pm.test(\"Require set environment variable 'teacher_email_address'\", function () {",
									"\tpm.expect(teaAddrParam).to.be.eql(true);",
									"}) ",
									"",
									"if (teaAddrParam == true)",
									"{",
									"",
									"// response 200",
									"pm.test(\"Teachers Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"                    pm.environment.set(\"teacher_id\", data.users[0].sourcedId);",
									"                    console.log(\"Teacher ID set to: \" + pm.variables.get(\"teacher_id\"));",
									"                    tests[\"Parse Teacher ID\"] = true;",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.teachers !== null && data.teachers !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.teachers)) {",
									"\t\t\t\t\tpm.environment.set(\"teacher_id\", data.teachers[0].sourcedId);",
									"                    console.log(\"Teacher ID set to: \" + pm.variables.get(\"teacher_id\"));",
									"                    tests[\"Parse Teacher ID\"] = true;",
									"                    retArray = data.teachers;",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or teachers\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Teacher array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t\tpm.test(\"Teacher array is exactly 1 record matching email\", function () {",
									"\t\t\tpm.expect(retArray.length).to.be.eql(1);",
									"\t\t});",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require teacher.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require teacher.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require username without @\", function () {",
									"            pm.expect(ret0.username).to.not.contain('@'); //SDS adds second domain",
									"\t\t});",
									"        ",
									"         pm.test(\"Require email\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('email');",
									"\t\t\tpm.expect(ret0.email).to.not.be.eql('');",
									"            pm.expect(ret0.email).to.not.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"// schools is a nested array",
									"\t\tpm.test(\"Require teacher.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretSchoolsArray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of teacher.orgs\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Teacher orgs Array is not empty\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retSchoolsArray != undefined) {",
									"\t\t\tif (retSchoolsArray.length >= 0)",
									"\t\t\t\tretSchool = retSchoolsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// school validations",
									"\tif (retSchool != undefined) {",
									"",
									"\t\t// school is a nested array ",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require teacher.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require org teacher.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t});",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"\t\t//});",
									"",
									"    } // schools",
									"",
									"",
									"        if (ret0.sourcedId !== null && ret0.sourcedId !== undefined)",
									"        {",
									"            pm.environment.set(\"teacher_id\", ret0.sourcedId);",
									"            console.log(\"Teacher ID set to: \" + pm.variables.get(\"teacher_id\"));",
									"",
									"        } // teacher sourcedid not null",
									"",
									"",
									"\t} // validations",
									"} // 200",
									"} // teaAddrParam"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Expects Teacher Email to be provided as environment variable\r",
									"if (!pm.environment.get(\"teacher_email_address\"))\r",
									"{\r",
									"    console.log(\"Missing Teacher Email Address, It is required to be added in pm.environment\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/teachers?filter=email='{{teacher_email_address}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"teachers"
							],
							"query": [
								{
									"key": "filter",
									"value": "email='{{teacher_email_address}}'"
								}
							]
						},
						"description": "Gets a teacher based on their email."
					},
					"response": []
				}
			]
		},
		{
			"name": "APIs used for SDS Classic Deltas",
			"item": [
				{
					"name": "Get OAuth2 Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Get OAuth 2 Access Token\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if(responseCode.code === 200)",
									"{",
									"    pm.environment.set(\"OAuth2AccessToken\", data.access_token);   // \"Bearer \" + ",
									"    pm.environment.set(\"OAuth2RefreshToken\", data.refresh_token);",
									"    tests[\"Parse access token\"] = true;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{OneRosterConsumerSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{OneRosterConsumerKey}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{OneRosterConsumerKey}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_secret",
									"value": "{{OneRosterConsumerSecret}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "https://purl.imsglobal.org/spec/or/v1p1/scope/roster-core.readonly https://purl.imsglobal.org/spec/or/v1p1/scope/roster-demographics.readonly",
									"description": "is",
									"type": "text",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "organisation onerosterapi",
									"description": "cp",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{Oauth2TokenAddress}}",
							"host": [
								"{{Oauth2TokenAddress}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "status='active'",
									"description": "Filters for active records",
									"disabled": true
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get Schools - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"var moment = require('moment');",
									"",
									"// response 200",
									"//tests[\"Get Schools\"] = responseCode.code === 200;",
									"pm.test(\"Schools Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime); //pm.environment.get(\"maxResponseTime\") needs to be int",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.schools !== null && data.schools !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.schools)) {",
									"\t\t\t\t\tretArray = data.schools;",
									"\t\t\t\t\ttests[\"Schools is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Schools is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.orgs !== null && data.orgs !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.orgs)) {",
									"\t\t\t\t\tretArray = data.orgs;",
									"\t\t\t\t\ttests[\"Orgs is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Orgs is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of schools or orgs\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"School Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require school.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require school.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.name\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('name');",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.type\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('type');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require org school.type valid values\", function () {",
									"\t\t\tpm.expect(ret0.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require school.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// set school id env variable",
									"\t\t// tests[\"Parse response\"] = true;",
									"\t\tpm.environment.set(\"school_id\", ret0.sourcedId);",
									"\t\tconsole.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"",
									"    // delta tests",
									"         paramModifiedDate = pm.variables.get(\"DeltaDateTime\");",
									"         if (paramModifiedDate == undefined)",
									"         {",
									"             var createDeltaDate = moment().subtract(6, 'months').toISOString() ",
									"            pm.environment.set(\"DeltaDateTime\", createDeltaDate);",
									"            console.log(\"DeltaDateTime is set to: \" + createDeltaDate);",
									"         }",
									"",
									"         pm.test(\"Environment Variable delta_datetime is set to datetime YYYY-MM-DDTHH:MM:SS.mmmZ\", function() {",
									"\t         pm.expect(paramModifiedDate.isNaN);",
									"\t         pm.expect(paramModifiedDate).to.not.be.eql('');",
									"             pm.expect(paramModifiedDate).to.not.be.eql('');",
									"             ",
									"        });",
									"",
									"        pm.test(\"Returns records only if dateLastModified filter less than now\", function () {",
									"                pm.expect(new Date(paramModifiedDate) <= new Date());",
									"        });",
									"",
									"        pm.test(\"Require Environment Variable delta_datetime is format YYYY-MM-DDTHH:mm:ssZ\", function () {",
									"                var testDate = moment(paramModifiedDate);",
									"                pm.expect(testDate.isValid()).is.true;",
									"               // pm.expect(moment(paramModifiedDate, 'MM-DD-YYYYTHH:mm:ss.SSSZ', true).isValid()).is.true;",
									"\t\t});",
									"",
									"",
									"         if (ret0 != undefined) {",
									"",
									"            pm.test(\"Require school dateLastModified\", function () {",
									"                pm.expect(ret0).to.have.property('dateLastModified');",
									"                pm.expect(ret0.dateLastModified).to.not.be.eql('');",
									"            });",
									"",
									"            pm.test(\"Require school dateLastModified to be at least filter dateLastModified\", function () {",
									"                pm.expect(new Date(ret0.dateLastModified) >= new Date(paramModifiedDate));",
									"            });",
									"",
									"            tests[\"Parse response\"] = true;",
									"        } //delta",
									"",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools?offset=0&limit=100&filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get Classes - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchool = undefined;",
									"var retTermsArray = undefined;",
									"var retTerm = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"pm.test(\"Classes Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array ",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.classes !== null && data.classes !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.classes)) {",
									"\t\t\t\t\tretArray = data.classes;",
									"\t\t\t\t\ttests[\"Classes is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Classes is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of classes\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Class Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require class.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require class.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.title\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('title');",
									"\t\t\tpm.expect(ret0.title).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object",
									"\t\tpm.test(\"Require class.school\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('school');",
									"\t\t\tretSchool = ret0.school;",
									"\t\t});",
									"\t\t// school is a nested object -- schoolSourcedId",
									"\t\tpm.test(\"Require class.school.sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require class.school.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require class.school.type\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require class.school.type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);",
									"\t\t});",
									"",
									"",
									"\t\t// terms is a nested array",
									"\t\tpm.test(\"Require class.terms\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('terms');",
									"\t\t\tretTermsArray = ret0.terms;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of class.terms\", function () {",
									"\t\t\tpm.expect(retTermsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"class.terms array is not empty\", function () {",
									"\t\t\tpm.expect(retTermsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retTermsArray != undefined) {",
									"\t\t\tif (retTermsArray.length >= 0)",
									"\t\t\t\tretTerm = retTermsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// terms validations",
									"\tif (retTerm != undefined) {",
									"",
									"\t\t// terms is a nested array -- termSourcedId",
									"\t\tpm.test(\"Require class.terms[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retTerm).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retTerm.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require class.terms[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retTerm.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require class.terms[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retTerm).to.have.property('type');",
									"\t\t\tpm.expect(retTerm.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate term type",
									"\t\tpm.test(\"Require class.terms[0].type valid values\", function () {",
									"\t\t\tpm.expect(retTerm.type).to.be.oneOf(['academicSession', 'term', 'gradingPeriod', 'semester', 'schoolYear']);",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\tpm.environment.set(\"term_id\", retTerm.sourcedId);",
									"\t\t\tconsole.log(\"Term ID set to: \" + pm.variables.get(\"term_id\"));",
									"\t\t});",
									"",
									"    } // terms",
									"",
									"    // delta tests",
									"        paramModifiedDate = pm.variables.get(\"DeltaDateTime\");",
									"         pm.test(\"Environment Variable delta_datetime is set to datetime YYYY-MM-DDTHH:MM:SS.mmmZ\", function() {",
									"\t         pm.expect(paramModifiedDate.isNaN);",
									"\t         pm.expect(paramModifiedDate).to.not.be.eql('');",
									"             pm.expect(paramModifiedDate).to.not.be.eql('');",
									"        });",
									"",
									"        pm.test(\"Returns records only if dateLastModified filter less than now\", function () {",
									"                pm.expect(new Date(paramModifiedDate) <= new Date());",
									"        });",
									"",
									"         if (ret0 != undefined) {",
									"",
									"            pm.test(\"Require classes dateLastModified\", function () {",
									"                pm.expect(ret0).to.have.property('dateLastModified');",
									"                pm.expect(ret0.dateLastModified).to.not.be.eql('');",
									"            });",
									"",
									"            pm.test(\"Require classes dateLastModified to be at least filter dateLastModified\", function () {",
									"                pm.expect(new Date(ret0.dateLastModified) >= new Date(paramModifiedDate));",
									"            });",
									"",
									"            tests[\"Parse response\"] = true;",
									"        } //delta",
									"",
									"",
									"",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Users - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Users Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"User Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require user.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require user.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"// email is not required",
									"        //  pm.test(\"Require email\", function () {",
									"\t\t//\tpm.expect(ret0).to.have.property('email');",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');",
									"\t\t//});",
									"",
									"\t\tpm.test(\"Require user.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"// schools is a nested array",
									"\t\tpm.test(\"Require user.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretSchoolsArray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of user.orgs\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"User orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retSchoolsArray != undefined) {",
									"\t\t\tif (retSchoolsArray.length >= 0)",
									"\t\t\t\tretSchool = retSchoolsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// school validations",
									"\tif (retSchool != undefined) {",
									"",
									"\t\t// user org is a nested array ",
									"\t\tpm.test(\"Require user.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require user.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require user.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require org user.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t});",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"\t\t//});",
									"",
									"    } // schools",
									"",
									"",
									"// delta tests",
									"        paramModifiedDate = pm.variables.get(\"DeltaDateTime\");",
									"         pm.test(\"Environment Variable delta_datetime is set to datetime YYYY-MM-DDTHH:MM:SS.mmmZ\", function() {",
									"",
									"\t         pm.expect(paramModifiedDate.isNaN);",
									"\t         pm.expect(paramModifiedDate).to.not.be.eql('');",
									"             pm.expect(paramModifiedDate).to.not.be.eql('');",
									"        });",
									"",
									"",
									"        pm.test(\"Returns records only if dateLastModified filter less than now\", function () {",
									"                pm.expect(new Date(paramModifiedDate) <= new Date());",
									"        });",
									"",
									"         if (ret0 != undefined) {",
									"",
									"            pm.test(\"Require user dateLastModified\", function () {",
									"                pm.expect(ret0).to.have.property('dateLastModified');",
									"                pm.expect(ret0.dateLastModified).to.not.be.eql('');",
									"            });",
									"",
									"            pm.test(\"Require user dateLastModified to be at least filter dateLastModified\", function () {",
									"                pm.expect(new Date(ret0.dateLastModified) >= new Date(paramModifiedDate));",
									"            });",
									"",
									"            tests[\"Parse response\"] = true;",
									"        } //delta",
									"",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Students - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Students Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.students !== null && data.students !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.students)) {",
									"\t\t\t\t\tretArray = data.students;",
									"\t\t\t\t\ttests[\"Students is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Students is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or students\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Student Array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require student.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require student.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require username without @\", function () {",
									"            pm.expect(ret0.username).to.not.contain('@'); //SDS adds second domain",
									"\t\t});",
									"",
									"// email is not required",
									"        //  pm.test(\"Require email\", function () {",
									"\t\t//\tpm.expect(ret0).to.have.property('email');",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');",
									"\t\t//});",
									"",
									"\t\tpm.test(\"Require student.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require student.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"// schools is a nested array",
									"\t\tpm.test(\"Require student.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretSchoolsArray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of student.orgs\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Student orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retSchoolsArray != undefined) {",
									"\t\t\tif (retSchoolsArray.length >= 0)",
									"\t\t\t\tretSchool = retSchoolsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// school validations",
									"\tif (retSchool != undefined) {",
									"",
									"\t\t// student org is a nested array ",
									"\t\tpm.test(\"Require student.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require student.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require student.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require org student.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t});",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"\t\t//});",
									"",
									"    } // schools",
									"",
									"",
									"// delta tests",
									"         paramModifiedDate = pm.variables.get(\"DeltaDateTime\");",
									"",
									"         pm.test(\"Environment Variable delta_datetime is set to datetime YYYY-MM-DDTHH:MM:SS.mmmZ\", function() {",
									"",
									"\t         pm.expect(paramModifiedDate.isNaN);",
									"\t         pm.expect(paramModifiedDate).to.not.be.eql('');",
									"             pm.expect(paramModifiedDate).to.not.be.eql('');",
									"        });",
									"",
									"",
									"        pm.test(\"Returns records only if dateLastModified filter less than now\", function () {",
									"                pm.expect(new Date(paramModifiedDate) <= new Date());",
									"        });",
									"",
									"         if (ret0 != undefined) {",
									"",
									"            pm.test(\"Require student dateLastModified\", function () {",
									"                pm.expect(ret0).to.have.property('dateLastModified');",
									"                pm.expect(ret0.dateLastModified).to.not.be.eql('');",
									"            });",
									"",
									"            pm.test(\"Require student dateLastModified to be at least filter dateLastModified\", function () {",
									"                pm.expect(new Date(ret0.dateLastModified) >= new Date(paramModifiedDate));",
									"            });",
									"",
									"            tests[\"Parse response\"] = true;",
									"        } //delta",
									"",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/students?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"students"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Teachers - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var retSchoolsArray = undefined;",
									"var retSchool = undefined;",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Teachers Success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\t// get the array (could be orgs os schools)",
									"\tswitch (true) {",
									"",
									"\t\tcase (data.users !== null && data.users !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.users)) {",
									"\t\t\t\t\tretArray = data.users;",
									"\t\t\t\t\ttests[\"Users is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Users is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tcase (data.teachers !== null && data.teachers !== undefined):",
									"\t\t\t{",
									"\t\t\t\tif (Array.isArray(data.teachers)) {",
									"\t\t\t\t\tretArray = data.teachers;",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = true;",
									"\t\t\t\t} else {",
									"\t\t\t\t\ttests[\"Teachers is Array\"] = false;",
									"\t\t\t\t}",
									"\t\t\t\tbreak;",
									"\t\t\t}",
									"",
									"\t\tdefault:",
									"",
									"\t} // switch",
									"",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of users or teachers\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Teacher array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require teacher.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require teacher.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require username without @\", function () {",
									"            pm.expect(ret0.username).to.not.contain('@'); //SDS adds second domain",
									"\t\t});",
									"        ",
									"// email is not required",
									"        //  pm.test(\"Require email\", function () {",
									"\t\t//\tpm.expect(ret0).to.have.property('email');",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');",
									"\t\t//});",
									"",
									"\t\tpm.test(\"Require teacher.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require teacher.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"// schools is a nested array",
									"\t\tpm.test(\"Require teacher.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretSchoolsArray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of teacher.orgs\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Teacher orgs Array is not empty\", function () {",
									"\t\t\tpm.expect(retSchoolsArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retSchoolsArray != undefined) {",
									"\t\t\tif (retSchoolsArray.length >= 0)",
									"\t\t\t\tretSchool = retSchoolsArray[0]",
									"\t\t}",
									"",
									"\t",
									"\t// school validations",
									"\tif (retSchool != undefined) {",
									"",
									"\t\t// school is a nested array ",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require teacher.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require teacher.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require org teacher.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t});",
									"",
									"\t\t\t// set term id env variable",
									"\t\t\t//pm.environment.set(\"schoo9l_id\", retSchool.sourcedId);",
									"\t\t\t//console.log(\"School ID set to: \" + pm.variables.get(\"school_id\"));",
									"\t\t//});",
									"",
									"    } // schools",
									"",
									"",
									"     // delta tests",
									"         paramModifiedDate = pm.variables.get(\"DeltaDateTime\");",
									"         pm.test(\"Environment Variable delta_datetime is set to datetime YYYY-MM-DDTHH:MM:SS.mmmZ\", function() {",
									"",
									"\t         pm.expect(paramModifiedDate.isNaN);",
									"\t         pm.expect(paramModifiedDate).to.not.be.eql('');",
									"             pm.expect(paramModifiedDate).to.not.be.eql('');",
									"        });",
									"",
									"",
									"        pm.test(\"Returns records only if dateLastModified filter less than now\", function () {",
									"                pm.expect(new Date(paramModifiedDate) <= new Date());",
									"        });",
									"",
									"         if (ret0 != undefined) {",
									"",
									"            pm.test(\"Require teacher dateLastModified\", function () {",
									"                pm.expect(ret0).to.have.property('dateLastModified');",
									"                pm.expect(ret0.dateLastModified).to.not.be.eql('');",
									"            });",
									"",
									"            pm.test(\"Require teacher dateLastModified to be at least filter dateLastModified\", function () {",
									"                pm.expect(new Date(ret0.dateLastModified) >= new Date(paramModifiedDate));",
									"            });",
									"",
									"            tests[\"Parse response\"] = true;",
									"        } //delta",
									"",
									"",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/teachers?offset=0&limit=10000&filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"teachers"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "10000",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of teachers."
					},
					"response": []
				},
				{
					"name": "Get Student Enrollments of a School - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var retSchool = undefined;\r",
									"var retClass = undefined;\r",
									"var retUser = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"Student Enrollment of School Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Student Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"Student Enrollment Array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require studentenrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require studentenrollment.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require studentenrollment.role\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('role');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        // validate user type\r",
									"\t\tpm.test(\"Require user studentenrollment.role.valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.role).to.be.oneOf(['student']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require studentenrollment.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require studentenrollment.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// school is a nested object\r",
									"\t\tpm.test(\"Require studentenrollment.school\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('school');\r",
									"\t\t\tretSchool = ret0.school;\r",
									"\t\t});\r",
									"\t\t// school is a nested object -- schoolSourcedId\r",
									"\t\tpm.test(\"Require studentenrollment.school.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require studentenrollment.school.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require studentenrollment.type\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require school.studentenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// class is a nested object\r",
									"\t\tpm.test(\"Require studentenrollment.class\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('class');\r",
									"\t\t\tretClass = ret0.class;\r",
									"\t\t});\r",
									"\t\t// class is a nested object -- classSourcedId\r",
									"\t\tpm.test(\"Require studentenrollment.class.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require studentenrollment.class.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// class is a nested object -- type\r",
									"\t\tpm.test(\"Require studentenrollment.class.type\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('type');\r",
									"\t\t\tpm.expect(retClass.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require class studentenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retClass.type).to.be.oneOf(['class']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"// user is a nested object\r",
									"\t\tpm.test(\"Require studentenrollment.user\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('user');\r",
									"\t\t\tretUser = ret0.user;\r",
									"\t\t});\r",
									"\t\t// user is a nested object -- userSourcedId\r",
									"\t\tpm.test(\"Require studentenrollment.user.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require studentenrollment.user.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// user is a nested object -- type\r",
									"\t\tpm.test(\"Require studentenrollment.user.type\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('type');\r",
									"\t\t\tpm.expect(retUser.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate user type\r",
									"\t\tpm.test(\"Require studentenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retUser.type).to.be.oneOf(['user']);\r",
									"\t\t});\r",
									"\r",
									"// delta tests\r",
									"        paramModifiedDate = pm.variables.get(\"DeltaDateTime\");\r",
									"         pm.test(\"Environment Variable delta_datetime is set to datetime YYYY-MM-DDTHH:MM:SS.mmmZ\", function() {\r",
									"\r",
									"\t         pm.expect(paramModifiedDate.isNaN);\r",
									"\t         pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"             pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"        });\r",
									"\r",
									"\r",
									"        pm.test(\"Returns records only if dateLastModified filter less than now\", function () {\r",
									"                pm.expect(new Date(paramModifiedDate) <= new Date());\r",
									"        });\r",
									"\r",
									"         if (ret0 != undefined) {\r",
									"\r",
									"            pm.test(\"Require student enrollment dateLastModified\", function () {\r",
									"                pm.expect(ret0).to.have.property('dateLastModified');\r",
									"                pm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"            });\r",
									"\r",
									"            pm.test(\"Require student enrollment dateLastModified to be at least filter dateLastModified\", function () {\r",
									"                pm.expect(new Date(ret0.dateLastModified) >= new Date(paramModifiedDate));\r",
									"            });\r",
									"\r",
									"            tests[\"Parse response\"] = true;\r",
									"        } //delta\r",
									"\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/enrollments?offset=0&limit=100&filter=role='student' AND dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "role='student' AND dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get User Enrollments of a School - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var retSchool = undefined;\r",
									"var retClass = undefined;\r",
									"var retUser = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"User Enrollment of School Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of User Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"User Enrollment Array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.role\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('role');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        // validate user type\r",
									"\t\t// pm.test(\"Require user enrollment.role.valid values\", function () {\r",
									"\t\t\t// pm.expect(ret0.role).to.be.oneOf(['student']);\r",
									"\t\t// });\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// school is a nested object\r",
									"\t\tpm.test(\"Require enrollment.school\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('school');\r",
									"\t\t\tretSchool = ret0.school;\r",
									"\t\t});\r",
									"\t\t// school is a nested object -- schoolSourcedId\r",
									"\t\tpm.test(\"Require enrollment.school.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.school.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require enrollment.type\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require school.enrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// class is a nested object\r",
									"\t\tpm.test(\"Require enrollment.class\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('class');\r",
									"\t\t\tretClass = ret0.class;\r",
									"\t\t});\r",
									"\t\t// class is a nested object -- classSourcedId\r",
									"\t\tpm.test(\"Require enrollment.class.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.class.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// class is a nested object -- type\r",
									"\t\tpm.test(\"Require enrollment.class.type\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('type');\r",
									"\t\t\tpm.expect(retClass.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require class enrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retClass.type).to.be.oneOf(['class']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"// user is a nested object\r",
									"\t\tpm.test(\"Require enrollment.user\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('user');\r",
									"\t\t\tretUser = ret0.user;\r",
									"\t\t});\r",
									"\t\t// user is a nested object -- userSourcedId\r",
									"\t\tpm.test(\"Require enrollment.user.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.user.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// user is a nested object -- type\r",
									"\t\tpm.test(\"Require enrollment.user.type\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('type');\r",
									"\t\t\tpm.expect(retUser.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate user type\r",
									"\t\tpm.test(\"Require enrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retUser.type).to.be.oneOf(['user']);\r",
									"\t\t});\r",
									"\r",
									"  // delta tests\r",
									"  paramModifiedDate = pm.variables.get(\"DeltaDateTime\");\r",
									"         pm.test(\"Environment Variable delta_datetime is set to datetime YYYY-MM-DDTHH:MM:SS.mmmZ\", function() {\r",
									"\r",
									"\t         pm.expect(paramModifiedDate.isNaN);\r",
									"\t         pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"             pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"        });\r",
									"\r",
									"\r",
									"        pm.test(\"Returns records only if dateLastModified filter less than now\", function () {\r",
									"                pm.expect(new Date(paramModifiedDate) <= new Date());\r",
									"        });\r",
									"\r",
									"         if (ret0 != undefined) {\r",
									"\r",
									"            pm.test(\"Require user enrollment dateLastModified\", function () {\r",
									"                pm.expect(ret0).to.have.property('dateLastModified');\r",
									"                pm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"            });\r",
									"\r",
									"            pm.test(\"Require user enrollment dateLastModified to be at least filter dateLastModified\", function () {\r",
									"                pm.expect(new Date(ret0.dateLastModified) >= new Date(paramModifiedDate));\r",
									"            });\r",
									"\r",
									"            tests[\"Parse response\"] = true;\r",
									"        } //delta\r",
									"\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/enrollments?offset=0&limit=100&filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Teacher Enrollments of a School - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var retSchool = undefined;\r",
									"var retClass = undefined;\r",
									"var retUser = undefined;\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"Teacher Enrollment of School Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.enrollments !== null && data.enrollments !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.enrollments)) {\r",
									"\t\t\t\t\tretArray = data.enrollments;\r",
									"\t\t\t\t\ttests[\"Teacher Enrollments is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"Teacher Enrollments is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Teacher Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"Teacher Enrollment Array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require teacherenrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require teacherenrollment.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacherenrollment.role\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('role');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        // validate user type\r",
									"\t\tpm.test(\"Require user teacherenrollment.role valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.role).to.be.oneOf(['teacher']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacherenrollment.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require teacherenrollment.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// school is a nested object\r",
									"\t\tpm.test(\"Require school\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('school');\r",
									"\t\t\tretSchool = ret0.school;\r",
									"\t\t});\r",
									"\t\t// school is a nested object -- schoolSourcedId\r",
									"\t\tpm.test(\"Require teacherenrollment.school.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require teacherenrollment.school.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require teacherenrollment.school.type\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require school teacherenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\r",
									"// class is a nested object\r",
									"\t\tpm.test(\"Require teacherenrollment.class\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('class');\r",
									"\t\t\tretClass = ret0.class;\r",
									"\t\t});\r",
									"\t\t// class is a nested object -- classSourcedId\r",
									"\t\tpm.test(\"Require teacherenrollment.class.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require teacherenrollment.class.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// class is a nested object -- type\r",
									"\t\tpm.test(\"Require teacherenrollment.class.type\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('type');\r",
									"\t\t\tpm.expect(retClass.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require class teacherenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retClass.type).to.be.oneOf(['class']);\r",
									"\t\t});\r",
									"\r",
									"\r",
									"// user is a nested object\r",
									"\t\tpm.test(\"Require teacherenrollment.user\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('user');\r",
									"\t\t\tretUser = ret0.user;\r",
									"\t\t});\r",
									"\t\t// user is a nested object -- userSourcedId\r",
									"\t\tpm.test(\"Require teacherenrollment.user.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require teacherenrollment.user.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// user is a nested object -- type\r",
									"\t\tpm.test(\"Require teacherenrollment.user.type\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('type');\r",
									"\t\t\tpm.expect(retUser.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate user type\r",
									"\t\tpm.test(\"Require user teacherenrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retUser.type).to.be.oneOf(['user']);\r",
									"\t\t});\r",
									"\r",
									"// delta tests\r",
									"         paramModifiedDate = pm.variables.get(\"DeltaDateTime\");\r",
									"         pm.test(\"Environment Variable delta_datetime is set to datetime YYYY-MM-DDTHH:MM:SS.mmmZ\", function() {\r",
									"\r",
									"\t         pm.expect(paramModifiedDate.isNaN);\r",
									"\t         pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"             pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"        });\r",
									"\r",
									"\r",
									"        pm.test(\"Returns records only if dateLastModified filter less than now\", function () {\r",
									"                pm.expect(new Date(paramModifiedDate) <= new Date());\r",
									"        });\r",
									"\r",
									"         if (ret0 != undefined) {\r",
									"\r",
									"            pm.test(\"Require teacher enrollment dateLastModified\", function () {\r",
									"                pm.expect(ret0).to.have.property('dateLastModified');\r",
									"                pm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"            });\r",
									"\r",
									"            pm.test(\"Require teacher enrollment dateLastModified to be at least filter dateLastModified\", function () {\r",
									"                pm.expect(new Date(ret0.dateLastModified) >= new Date(paramModifiedDate));\r",
									"            });\r",
									"\r",
									"            tests[\"Parse response\"] = true;\r",
									"        } //delta\r",
									"\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/schools/{{school_id}}/enrollments?offset=0&limit=100&filter=role='teacher' AND dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"schools",
								"{{school_id}}",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "role='teacher' AND dateLastModified>'{{DeltaDateTime}}'",
									"description": "Filters for active records"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Academic Sessions (Terms) - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"// response 200\r",
									"//tests[\"Get Schools\"] = responseCode.code === 200;\r",
									"pm.test(\"Academic Sessions Success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Environment Variable SchoolYear is set\", function() {\r",
									"\tvar sy = pm.variables.get(\"SchoolYear\");\r",
									"\tpm.expect(sy.isNaN);\r",
									"\tpm.expect(sy).to.not.be.eql('');\r",
									"});\r",
									"\r",
									"    // test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\t\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\t// get the array (could be orgs os schools)\r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.academicSessions !== null && data.academicSessions !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tif (Array.isArray(data.academicSessions)) {\r",
									"\t\t\t\t\tretArray = data.academicSessions;\r",
									"\t\t\t\t\ttests[\"academicSessions is Array\"] = true;\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\ttests[\"academicSessions is Array\"] = false;\r",
									"\t\t\t\t}\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\t\t\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of academicSessions\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"AcademicSessions Array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require academicSession.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.title\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('title');\r",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.type\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('type');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.schoolYear\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('schoolYear');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require academicSession.schoolYear to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.schoolYear).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.schoolYear to be numeric\", function () {\r",
									"\t\t\tpm.expect(isNaN(ret0.schoolYear)).is.false;\r",
									"\t\t\tpm.expect(ret0.schoolYear.toString()).to.have.length(4);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.type valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.type).to.be.oneOf(['gradingPeriod','semester','schoolYear','term']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.startDate\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('startDate');\r",
									"\t\t\tpm.expect(ret0.startDate).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        if (ret0.startDate !== null && ret0.startDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require academicSession.startDate format\", function () {\r",
									"                pm.expect(moment(ret0.startDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"        if (ret0.endDate !== null && ret0.endDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require academicSession.endDate format\", function () {\r",
									"                pm.expect(moment(ret0.endDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"        // delta tests\r",
									"        paramModifiedDate = pm.variables.get(\"DeltaDateTime\");\r",
									"         pm.test(\"Environment Variable delta_datetime is set to datetime YYYY-MM-DDTHH:MM:SS.mmmZ\", function() {\r",
									"\r",
									"\t         pm.expect(paramModifiedDate.isNaN);\r",
									"\t         pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"             pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"        });\r",
									"\r",
									"\r",
									"        pm.test(\"Returns records only if dateLastModified filter less than now\", function () {\r",
									"                pm.expect(new Date(paramModifiedDate) <= new Date());\r",
									"        });\r",
									"\r",
									"         if (ret0 != undefined) {\r",
									"\r",
									"            pm.test(\"Require academic session dateLastModified\", function () {\r",
									"                pm.expect(ret0).to.have.property('dateLastModified');\r",
									"                pm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"            });\r",
									"\r",
									"            pm.test(\"Require academic session dateLastModified to be at least filter dateLastModified\", function () {\r",
									"                pm.expect(new Date(ret0.dateLastModified) >= new Date(paramModifiedDate));\r",
									"            });\r",
									"\r",
									"            tests[\"Parse response\"] = true;\r",
									"        } //delta\r",
									"\r",
									"\r",
									"\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/academicSessions?offset=0&limit=100",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"academicSessions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "schoolYear='{}}' AND dateLastModified>'{{DeltaDateTime}}'",
									"disabled": true
								}
							]
						},
						"description": "Gets a page of academic sessions. Academic sessions can be of type \"School Year\", Term\", \"Semester\", \"GradingPeriod\""
					},
					"response": []
				}
			]
		},
		{
			"name": "APIs used for Classic Debugging",
			"item": [
				{
					"name": "Get Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/courses?offset=0&limit=100",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"courses"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'",
									"description": "Filters for active records",
									"disabled": true
								}
							]
						},
						"description": "Gets a page of courses"
					},
					"response": []
				},
				{
					"name": "Get Student Enrollments of a Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes/{{class_id}}/students",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes",
								"{{class_id}}",
								"students"
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Teacher Enrollments of a Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes/{{class_id}}/teachers",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes",
								"{{class_id}}",
								"teachers"
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Student's Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/students/{{student_id}}/classes?offset=0&limit=100",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"students",
								"{{student_id}}",
								"classes"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Teacher's Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/teachers/{{teacher_id}}/classes?offset=0&limit=100",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"teachers",
								"{{teacher_id}}",
								"classes"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Number of results to return from selected index"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Search User by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?filter=givenName='Smith' AND familyName='Azure'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "givenName='Smith' AND familyName='Azure'"
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Gets a student by ID"
					},
					"response": []
				},
				{
					"name": "Search User by Username or Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?filter=username='stud1' OR email~'stud1'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "username='stud1' OR email~'stud1'"
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Gets a student by ID"
					},
					"response": []
				},
				{
					"name": "Get Gradebook lineItems",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/lineItems?limit=10000",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"lineItems"
							],
							"query": [
								{
									"key": "limit",
									"value": "10000"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Gradebook Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/categories?limit=10000",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"categories"
							],
							"query": [
								{
									"key": "limit",
									"value": "10000"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Gradebook results for lineItem (by class)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1//classes/{{class_id}}/lineItems/{{lineitem_id}}/results",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"",
								"classes",
								"{{class_id}}",
								"lineItems",
								"{{lineitem_id}}",
								"results"
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "APIs required for SDS (*new*)",
			"item": [
				{
					"name": "Get OAuth2 Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Get OAuth 2 Access Token\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if(responseCode.code === 200)",
									"{",
									"    pm.environment.set(\"OAuth2AccessToken\", data.access_token);   // \"Bearer \" + ",
									"    pm.environment.set(\"OAuth2RefreshToken\", data.refresh_token);",
									"    tests[\"Parse access token\"] = true;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{OneRosterConsumerSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{OneRosterConsumerKey}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{OneRosterConsumerKey}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_secret",
									"value": "{{OneRosterConsumerSecret}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "{{Scopes}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{Oauth2TokenAddress}}",
							"host": [
								"{{Oauth2TokenAddress}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "status='active'",
									"description": "Filters for active records",
									"disabled": true
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get AcademicSessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"var dtFormatValid = false;\r",
									"var dt = \"\";\r",
									"\r",
									"// response 200\r",
									"pm.test(\"Academic sessions success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									" \r",
									"// test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"//X-Total-Count is optional\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\t\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.academicSessions !== null && \r",
									"        data.academicSessions !== undefined && \r",
									"        Array.isArray(data.academicSessions)) {\r",
									"\t\tretArray = data.academicSessions;\r",
									"\t\ttests[\"academicSessions is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"academicSessions is array\"] = false;\r",
									"\t}\r",
									"\t\t\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of academicSessions\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"academicSessions array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									" \r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require academicSession.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.title\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('title');\r",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.type\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('type');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        //Customers who use SDS LOVs will be able to edit these values\r",
									"        pm.test(\"Require academicSession.type valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.type).to.be.oneOf(['gradingPeriod','semester','schoolYear','term']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.schoolYear\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('schoolYear');\r",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require academicSession.schoolYear to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.schoolYear).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.schoolYear to be numeric\", function () {\r",
									"\t\t\tpm.expect(isNaN(ret0.schoolYear)).is.false;\r",
									"\t\t\tpm.expect(ret0.schoolYear.toString()).to.have.length(4);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require academicSession.startDate\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('startDate');\r",
									"\t\t\tpm.expect(ret0.startDate).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        if (ret0.startDate !== null && ret0.startDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require academicSession.startDate format\", function () {\r",
									"                pm.expect(moment(ret0.startDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"        pm.test(\"Require academicSession.endDate\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('endDate');\r",
									"\t\t\tpm.expect(ret0.endDate).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        if (ret0.endDate !== null && ret0.endDate !== undefined)\r",
									"        {\r",
									"           \tpm.test(\"Require academicSession.endDate format\", function () {\r",
									"                  pm.expect(moment(ret0.endDate.substring(0,10), 'YYYY-MM-DD', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"  // validate dateLastModified format to W3C /  of ISO 8601\r",
									"    pm.test(\"Require dateLastModified\", function () {\r",
									"\t\tpm.expect(ret0).to.have.property('dateLastModified');\r",
									"\t\tpm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"\t});\r",
									" \r",
									"    dateLastModified = ret0.dateLastModified;\r",
									"\r",
									"    if (dateLastModified !== null && dateLastModified !== undefined)\r",
									"    {    \r",
									"   \r",
									"      \tpm.test(\"dateLastModified must be format: YYYY-MM-DDTHH:mm:ss.SSSZ\", function () {\r",
									"            pm.expect(moment(dateLastModified, 'YYYY-MM-DDTHH:mm:ss.SSSZ', true).isValid()).is.true;\r",
									"\t    });\r",
									"\r",
									"    }\r",
									"  \r",
									"    // end date format validation\r",
									"\r",
									"        // set session id env variable for paging test\r",
									"\t\tpm.environment.set(\"session_id\", ret0.sourcedId);\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/academicSessions?offset=0&limit=5000&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"academicSessions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "5000",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of academic sessions. Academic sessions can be of type \"School Year\", Term\", \"Semester\", \"GradingPeriod\""
					},
					"response": []
				},
				{
					"name": "Get AcademicSessions - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"\r",
									"// response 200\r",
									"pm.test(\"Academic sessions Paging success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.academicSessions !== null && \r",
									"        data.academicSessions !== undefined && \r",
									"        Array.isArray(data.academicSessions)) {\r",
									"\t\tretArray = data.academicSessions;\r",
									"\t\ttests[\"academicSessions is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"academicSessions is array\"] = false;\r",
									"\t}\r",
									"\t\t\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of academicSessions\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"academicSessions array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) { \r",
									"\r",
									"\t\tpm.test(\"Require academicSession.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"academicSession Paging Check -- sourcedId repeats on subsequent pages\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"session_id\"));\r",
									"\t\t});\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/academicSessions?offset=2&limit=1&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"academicSessions"
							],
							"query": [
								{
									"key": "offset",
									"value": "2",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of academic sessions. Academic sessions can be of type \"School Year\", Term\", \"Semester\", \"GradingPeriod\""
					},
					"response": []
				},
				{
					"name": "Get AcademicSessions - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"\r",
									"// response 200\r",
									"pm.test(\"Academic No Records Paging success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.academicSessions !== null && \r",
									"        data.academicSessions !== undefined && \r",
									"        Array.isArray(data.academicSessions)) {\r",
									"\t\tretArray = data.academicSessions;\r",
									"\t\ttests[\"academicSessions is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"academicSessions is array\"] = false;\r",
									"\t}\r",
									"\t\t\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of academicSessions\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"    // array must be empty\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"academicSessions array is empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;\r",
									"\t\t});\r",
									"\t}\t\r",
									"\t\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/academicSessions?filter=sourcedId='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"academicSessions"
							],
							"query": [
								{
									"key": "filter",
									"value": "sourcedId='norecords'"
								}
							]
						},
						"description": "Gets a page of academic sessions. Academic sessions can be of type \"School Year\", Term\", \"Semester\", \"GradingPeriod\""
					},
					"response": []
				},
				{
					"name": "Get AcademicSessions - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var retLength = 10;\r",
									"var moment = require('moment');\r",
									"\r",
									"// response 200\r",
									"pm.test(\"Academic sessions success response / 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									" \r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.academicSessions !== null && \r",
									"        data.academicSessions !== undefined && \r",
									"        Array.isArray(data.academicSessions)) {\r",
									"\t\tretArray = data.academicSessions;\r",
									"\t\ttests[\"academicSessions is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"academicSessions is array\"] = false;\r",
									"\t}\r",
									"\t\t\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of academicSessions\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"academicSessions array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\r",
									"        if (retArray.length < 10) retLength = retArray.length;\r",
									"\t}\r",
									"\r",
									"    paramModifiedDate = pm.variables.get(\"DeltaDateTime\");\r",
									"    pm.test(\"environment variable DeltaDateTime must be set\", function() {\r",
									"        //pm.expect(paramModifiedDate).isValid();\r",
									"        pm.expect(paramModifiedDate.isNaN);\r",
									"        pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"    });\r",
									"\r",
									"        if (paramModifiedDate !== null && paramModifiedDate !== undefined)\r",
									"        {    \r",
									"           \tpm.test(\"environment variable DeltaDateTime must be format: YYYY-MM-DDTHH:mm:ssZ\", function () {\r",
									"                pm.expect(moment(paramModifiedDate.substring(0,19), 'YYYY-MM-DDTHH:mm:ss', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"    pm.test(\"Returns records only if academicSession.dateLastModified filter less than now\", function () {\r",
									"        pm.expect(new Date(paramModifiedDate) <= new Date());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Require environment variable delta_datetime is format YYYY-MM-DDTHH:mm:ssZ\", function () {\r",
									"        var testDate = moment(paramModifiedDate);\r",
									"         pm.expect(testDate.isValid()).is.true;\r",
									"\t});\r",
									"if (retLength != undefined && retLength >=0 && retArray != undefined)\r",
									"{\r",
									"    for (var i=0; i<retLength; i++) {\r",
									"\t    var retI = retArray[i];\r",
									"        if (retI != undefined) {\r",
									"            pm.test(\"Require academicSessions.dateLastModified for delta\", function () {\r",
									"                pm.expect(retI).to.have.property('dateLastModified');\r",
									"                pm.expect(retI.dateLastModified).to.not.be.eql('');\r",
									"            });\r",
									"\r",
									"            pm.test(\"Require delta academicSession.dateLastModified to be at least filter dateLastModified\", function () {\r",
									"                pm.expect(new Date(retI.dateLastModified) >= new Date(paramModifiedDate));\r",
									"            });\r",
									"        } \r",
									"    }\r",
									"}\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/academicSessions?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"academicSessions"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of academic sessions. Academic sessions can be of type \"School Year\", Term\", \"Semester\", \"GradingPeriod\""
					},
					"response": []
				},
				{
					"name": "Get Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var moment = require('moment');",
									"var maxResponseTime = 30000; //30 seconds",
									"",
									"// response 200",
									"pm.test(\"Orgs success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime); //pm.environment.get(\"maxResponseTime\") needs to be int",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.orgs !== null && ",
									"        data.orgs !== undefined && ",
									"        Array.isArray(data.orgs)) {",
									"\t\tretArray = data.orgs;",
									"\t\ttests[\"orgs is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"orgs is array\"] = false;",
									"\t}",
									"\t\t",
									"\t// array must exist",
									"\tpm.test(\"Require array of orgs\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require org.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require org.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require org.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require org.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require org.name\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('name');",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require org.type\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('type');",
									"\t\t\tpm.expect(ret0.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require org org.type valid values\", function () {",
									"\t\t\tpm.expect(ret0.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require org.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require org.dateLastModified\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('dateLastModified');",
									"\t\t\tpm.expect(ret0.dateLastModified).to.not.be.eql('');",
									"\t\t});",
									"",
									"        if (ret0.dateLastModified !== null && ret0.dateLastModified !== undefined)",
									"        {    ",
									"           \tpm.test(\"Require orgs.dateLastModified format\", function () {",
									"                pm.expect(moment(ret0.dateLastModified.substring(0,19), 'YYYY-MM-DDTHH:mm:ss', true).isValid()).is.true;",
									"\t\t    });",
									"        }",
									"",
									"        // set org id env variable",
									"\t\tpm.environment.set(\"org_id\", ret0.sourcedId);",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/orgs?offset=0&limit=5000&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"orgs"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "5000",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get Orgs - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"",
									"// response 200",
									"pm.test(\"Orgs Paging success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.orgs !== null && ",
									"        data.orgs !== undefined && ",
									"        Array.isArray(data.orgs)) {",
									"\t\tretArray = data.orgs;",
									"\t\ttests[\"orgs is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"orgs is array\"] = false;",
									"\t}",
									"\t\t",
									"\t// array must exist",
									"\tpm.test(\"Require array of orgs\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"",
									"\t\tpm.test(\"Org Paging Check -- sourcedId repeats on subsequent pages\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"org_id\"));",
									"\t\t});",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/orgs?offset=2&limit=1&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"orgs"
							],
							"query": [
								{
									"key": "offset",
									"value": "2",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get Orgs - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"",
									"// response 200",
									"pm.test(\"Orgs No Records success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.orgs !== null && ",
									"        data.orgs !== undefined && ",
									"        Array.isArray(data.orgs)) {",
									"\t\tretArray = data.orgs;",
									"\t\ttests[\"orgs is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"orgs is array\"] = false;",
									"\t}",
									"\t\t",
									"\t// array must exist",
									"\tpm.test(\"Require array of orgs\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"\t// array must be empty",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"Orgs array is empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;",
									"\t\t});",
									"\t}",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/orgs?filter=sourcedId='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"orgs"
							],
							"query": [
								{
									"key": "filter",
									"value": "sourcedId='norecords'"
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get Orgs - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var retLength = 10;",
									"var moment = require('moment');",
									"",
									"// response 200",
									"pm.test(\"Orgs success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.orgs !== null && ",
									"        data.orgs !== undefined && ",
									"        Array.isArray(data.orgs)) {",
									"\t\tretArray = data.orgs;",
									"\t\ttests[\"orgs is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"orgs is array\"] = false;",
									"\t}",
									"\t// array must exist",
									"\tpm.test(\"Require array of orgs\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"        if (retArray.length < 10) retLength = retArray.length;",
									"\t}",
									"",
									"    paramModifiedDate = pm.variables.get(\"DeltaDateTime\");",
									"    pm.test(\"environment variable DeltaDateTime must be set\", function() {",
									"        //pm.expect(paramModifiedDate).isValid();",
									"        pm.expect(paramModifiedDate.isNaN);",
									"        pm.expect(paramModifiedDate).to.not.be.eql('');",
									"    });",
									"",
									"        if (paramModifiedDate !== null && paramModifiedDate !== undefined)",
									"        {    ",
									"           \tpm.test(\"environment variable DeltaDateTime must be format: YYYY-MM-DDTHH:mm:ssZ\", function () {",
									"                pm.expect(moment(paramModifiedDate.substring(0,19), 'YYYY-MM-DDTHH:mm:ss', true).isValid()).is.true;",
									"\t\t    });",
									"        }",
									"",
									"    pm.test(\"Returns records only if org.dateLastModified filter less than now\", function () {",
									"        pm.expect(new Date(paramModifiedDate) <= new Date());",
									"    });",
									"",
									"  ",
									"    pm.test(\"Require environment variable DeltaDateTime is format YYYY-MM-DDTHH:mm:ssZ\", function () {",
									"        var testDate = moment(paramModifiedDate);",
									"         pm.expect(testDate.isValid()).is.true;",
									"\t});",
									"",
									"if (retLength != undefined && retLength >=0 && retArray != undefined)",
									"{",
									"    for (var i=0; i<retLength; i++) {",
									"\t    var retI = retArray[i];",
									"        if (retI != undefined) {",
									"            pm.test(\"Require orgs.dateLastModified for delta\", function () {",
									"                pm.expect(retI).to.have.property('dateLastModified');",
									"                pm.expect(retI.dateLastModified).to.not.be.eql('');",
									"            });",
									"",
									"            pm.test(\"Require delta org.dateLastModified to be at least filter dateLastModified\", function () {",
									"                pm.expect(new Date(retI.dateLastModified) >= new Date(paramModifiedDate));",
									"            });",
									"        } ",
									"    }",
									"}",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/orgs?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"orgs"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of schools"
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var moment = require('moment');",
									"var maxResponseTime = 30000; //30 seconds",
									"var retOrgsarray = undefined;",
									"var retOrg = undefined;",
									"var retMetadata = undefined;",
									"var retFlags = undefined;",
									"var arrFlags = undefined;",
									"var dateLastModified = undefined;",
									"",
									"// response 200",
									"pm.test(\"Users success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.users !== null && ",
									"        data.users !== undefined && ",
									"        Array.isArray(data.users)) {",
									"\t\tretArray = data.users;",
									"\t\ttests[\"users is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"users is array\"] = false;",
									"\t}",
									"\t\t",
									"\t// array must exist",
									"\tpm.test(\"Require array of users\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"users array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require user.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require user.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.username\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('username');",
									"\t\t\tpm.expect(ret0.username).to.not.be.eql('');",
									"\t\t});",
									"",
									"        // email is not required",
									"        //  pm.test(\"Require email\", function () {",
									"\t\t//\tpm.expect(ret0).to.have.property('email');",
									"\t\t//\tpm.expect(ret0.rmail).to.not.be.eql('');",
									"\t\t//});",
									"",
									"\t\tpm.test(\"Require user.givenName\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('givenName');",
									"\t\t\tpm.expect(ret0.givenName).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require user.identifier\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('identifier');",
									"\t\t\tpm.expect(ret0.identifier).to.not.be.eql('');",
									"\t\t});",
									"",
									"        // orgs is a nested array",
									"\t\tpm.test(\"Require user.orgs\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('orgs');",
									"\t\t\tretOrgsarray = ret0.orgs;",
									"\t\t});",
									"",
									"\t\t// orgs is array",
									"\t\tpm.test(\"Require array of user.orgs\", function () {",
									"\t\t\tpm.expect(retOrgsarray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"User.orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retOrgsarray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retArray != undefined) {",
									"\t\t\tif (retOrgsarray.length >= 0)",
									"\t\t\t\tretOrg = retOrgsarray[0]",
									"\t\t}",
									"",
									"\t",
									"\t    // org validations",
									"\t    if (retOrg != undefined) {",
									"",
									"\t\t  // user org is a nested array ",
									"\t\t  pm.test(\"Require user.orgs[0].sourcedId\", function () {",
									"\t\t  \tpm.expect(retOrg).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retOrg.sourcedId).to.not.be.eql('');",
									"\t  \t  });",
									"",
									"\t\t  // school is a nested object -- type",
									"\t\t  pm.test(\"Require user.orgs[0].sourcedId\", function () {",
									"\t\t\tpm.expect(retOrg).to.have.property('type');",
									"\t\t\tpm.expect(retOrg.type).to.not.be.eql('');",
									"\t\t  });",
									"",
									"          pm.test(\"Require user.orgs[0].sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retOrg.sourcedId).to.be.a('string');",
									"\t\t  });",
									"",
									"\t\t  // validate org type",
									"\t\t  pm.test(\"Require org user.orgs[0].type valid values\", function () {",
									"\t\t\tpm.expect(retOrg.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national','org']);",
									"\t\t  });",
									"",
									"        } // orgs",
									"",
									"    // validate dateLastModified format to W3C /  of ISO 8601",
									"    pm.test(\"Require dateLastModified\", function () {",
									"\t\tpm.expect(ret0).to.have.property('dateLastModified');",
									"\t\tpm.expect(ret0.dateLastModified).to.not.be.eql('');",
									"\t});",
									" ",
									"    dateLastModified = ret0.dateLastModified;",
									"",
									"    if (dateLastModified !== null && dateLastModified !== undefined)",
									"    {    ",
									"   ",
									"      \tpm.test(\"dateLastModified must be format: YYYY-MM-DDTHH:mm:ss.SSSZ\", function () {",
									"            pm.expect(moment(dateLastModified, 'YYYY-MM-DDTHH:mm:ss.SSSZ', true).isValid()).is.true;",
									"\t    });",
									"",
									"    }",
									"  ",
									"    // end date format validation",
									"",
									"        // OPTIONAL metadata.userflags",
									"        // Full default flag enum list: freeLunch, reducedLunch,homeless,giftedOrTalented,504,ELL,LEP,IEP",
									"        //  metadata\" : {",
									"        //\t    \"microsoft.userFlags\" : \"freeLunch,homeless,giftedOrTalented\"",
									"        //\t}",
									"        if (ret0.metadata != undefined) {",
									"            retMetadata = ret0.metadata;",
									"",
									"            if (retMetadata[\"microsoft.userFlags\"] != undefined) {",
									"                retFlags = retMetadata[\"microsoft.userFlags\"];",
									"            }",
									"",
									"            if (retFlags != undefined) {",
									"                arrFlags = retFlags.split(\",\");",
									"                for (var i=0; i<(arrFlags.length); i++) {",
									"                    pm.test(\"metadata.microsoft.userFlags type valid values\", function () {",
									"\t\t\t        pm.expect(arrFlags[i]).to.be.oneOf(['freeLunch', 'homeless', 'giftedOrTalented', '504', 'ELL', 'LEP','IEP','']);",
									"\t\t            });",
									"                }",
									"            }",
									"        } ",
									"        pm.test(\"User.orgs array is not empty\", function () {",
									"\t\t\tpm.expect(retOrgsarray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"        // set user id env variable for paging test",
									"\t\tpm.environment.set(\"user_id\", ret0.sourcedId);",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?offset=0&limit=5000&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5000"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Users - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"",
									"// response 200",
									"pm.test(\"Users success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.users !== null && ",
									"        data.users !== undefined && ",
									"        Array.isArray(data.users)) {",
									"\t\tretArray = data.users;",
									"\t\ttests[\"users is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"users is array\"] = false;",
									"\t}",
									"\t\t",
									"\t// array must exist",
									"\tpm.test(\"Require array of users\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"users array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require user.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"user Paging Check --sourcedId repeats on subsequent pages\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"user_id\"));",
									"\t\t});",
									"\t} // validations",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?offset=2&limit=1&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Users - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"",
									"// response 200",
									"pm.test(\"Users No Records response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.users !== null && ",
									"        data.users !== undefined && ",
									"        Array.isArray(data.users)) {",
									"\t\tretArray = data.users;",
									"\t\ttests[\"users is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"users is array\"] = false;",
									"\t}",
									"\t\t",
									"\t// array must exist",
									"\tpm.test(\"Require array of users\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"\t// array must be empty",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"Users array is empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;",
									"\t\t});",
									"\t}\t",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?filter=sourcedId='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "sourcedId='norecords'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Users - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var retLength = 10;",
									"var moment = require('moment');",
									"",
									"// response 200",
									"pm.test(\"Users success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.users !== null && ",
									"        data.users !== undefined && ",
									"        Array.isArray(data.users)) {",
									"\t\tretArray = data.users;",
									"\t\ttests[\"users is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"users is array\"] = false;",
									"\t}",
									"\t\t",
									"\t// array must exist",
									"\tpm.test(\"Require array of users\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"users array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"        if (retArray.length < 10) retLength = retArray.length;",
									"\t}",
									"",
									"\t",
									"    paramModifiedDate = pm.variables.get(\"DeltaDateTime\");",
									"    pm.test(\"environment variable DeltaDateTime must be set\", function() {",
									"        //pm.expect(paramModifiedDate).isValid();",
									"        pm.expect(paramModifiedDate.isNaN);",
									"        pm.expect(paramModifiedDate).to.not.be.eql('');",
									"    });",
									"",
									"        if (paramModifiedDate !== null && paramModifiedDate !== undefined)",
									"        {    ",
									"           \tpm.test(\"environment variable DeltaDateTime must be format: YYYY-MM-DDTHH:mm:ssZ\", function () {",
									"                pm.expect(moment(paramModifiedDate.substring(0,19), 'YYYY-MM-DDTHH:mm:ss', true).isValid()).is.true;",
									"\t\t    });",
									"        }",
									"",
									"    pm.test(\"Returns records only if user.dateLastModified filter less than now\", function () {",
									"        pm.expect(new Date(paramModifiedDate) <= new Date());",
									"    });",
									"",
									"    pm.test(\"Require environment variable DeltaDateTime is format YYYY-MM-DDTHH:mm:ssZ\", function () {",
									"        var testDate = moment(paramModifiedDate);",
									"         pm.expect(testDate.isValid()).is.true;",
									"\t});",
									"",
									"if (retLength != undefined && retLength >=0 && retArray != undefined)",
									"{",
									"    for (var i=0; i<retLength; i++) {",
									"\t    var retI = retArray[i];",
									"        if (retI != undefined) {",
									"            pm.test(\"Require delta user.dateLastModified\", function () {",
									"                pm.expect(retI).to.have.property('dateLastModified');",
									"                pm.expect(retI.dateLastModified).to.not.be.eql('');",
									"            });",
									"",
									"            pm.test(\"Require delta user.dateLastModified to be at least filter dateLastModified\", function () {",
									"                pm.expect(new Date(retI.dateLastModified) >= new Date(paramModifiedDate));",
									"            });",
									"        } ",
									"    }",
									"}",
									"} // 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of students."
					},
					"response": []
				},
				{
					"name": "Get Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"var moment = require('moment');",
									"var maxResponseTime = 30000; //30 seconds",
									"var retSchool = undefined;",
									"var retTermsarray = undefined;",
									"var retTerm = undefined;",
									"var dateLastModified = undefined;",
									"",
									"pm.test(\"Classes success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"// test content-type",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"X-Total-Count header is present\", () => {",
									"  pm.response.to.have.header(\"X-Total-Count\");",
									"});",
									"",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"    if (data.classes !== null && ",
									"        data.classes !== undefined && ",
									"        Array.isArray(data.classes)) {",
									"\t\tretArray = data.classes;",
									"\t\ttests[\"classes is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"classes is array\"] = false;",
									"    }",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of classes\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Class array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require class.sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require class.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.status\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('status');",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.status valid values\", function () {",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);",
									"\t\t});",
									"",
									"\t\tpm.test(\"Require class.title\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('title');",
									"\t\t\tpm.expect(ret0.title).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// school is a nested object",
									"\t\tpm.test(\"Require class.school\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('school');",
									"\t\t\tretSchool = ret0.school;",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- schoolSourcedId",
									"\t\tpm.test(\"Require class.school.sourcedId\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"        pm.test(\"Require class.school.sourcedId to be string\", function () {",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');",
									"\t\t});",
									"",
									"\t\t// school is a nested object -- type",
									"\t\tpm.test(\"Require class.school.type\", function () {",
									"\t\t\tpm.expect(retSchool).to.have.property('type');",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\t// validate org type",
									"\t\tpm.test(\"Require class.school.type valid values\", function () {",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);",
									"\t\t});",
									"",
									"",
									"\t\t// terms is a nested array",
									"\t\tpm.test(\"Require class.terms\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('terms');",
									"\t\t\tretTermsarray = ret0.terms;",
									"\t\t});",
									"",
									"\t\t// terms is array",
									"\t\tpm.test(\"Require array of class.terms\", function () {",
									"\t\t\tpm.expect(retTermsarray).to.be.an('array');",
									"\t\t});",
									"",
									"\t\tpm.test(\"class.terms array is not empty\", function () {",
									"\t\t\tpm.expect(retTermsarray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"",
									"\t\tif (retTermsarray != undefined) {",
									"\t\t\tif (retTermsarray.length >= 0)",
									"\t\t\t\tretTerm = retTermsarray[0]",
									"\t\t}",
									"",
									"        // terms validations",
									"        if (retTerm != undefined) {",
									"",
									"            // terms is a nested array -- termSourcedId",
									"            pm.test(\"Require class.terms[0].sourcedId\", function () {",
									"                pm.expect(retTerm).to.have.property('sourcedId');",
									"                pm.expect(retTerm.sourcedId).to.not.be.eql('');",
									"            });",
									"",
									"            pm.test(\"Require class.terms[0].sourcedId to be string\", function () {",
									"                pm.expect(retTerm.sourcedId).to.be.a('string');",
									"            });",
									"",
									"            // school is a nested object -- type",
									"            pm.test(\"Require class.terms[0].sourcedId\", function () {",
									"                pm.expect(retTerm).to.have.property('type');",
									"                pm.expect(retTerm.type).to.not.be.eql('');",
									"            });",
									"",
									"            // validate term type",
									"            pm.test(\"Require class.terms[0].type valid values\", function () {",
									"                pm.expect(retTerm.type).to.be.oneOf(['academicSession', 'term', 'gradingPeriod', 'semester', 'schoolYear']);",
									"            });",
									"        } // terms",
									"",
									"    // validate dateLastModified format to W3C /  of ISO 8601",
									"    pm.test(\"Require dateLastModified\", function () {",
									"\t\tpm.expect(ret0).to.have.property('dateLastModified');",
									"\t\tpm.expect(ret0.dateLastModified).to.not.be.eql('');",
									"\t});",
									" ",
									"    dateLastModified = ret0.dateLastModified;",
									"",
									"    if (dateLastModified !== null && dateLastModified !== undefined)",
									"    {    ",
									"   ",
									"      \tpm.test(\"dateLastModified must be format: YYYY-MM-DDTHH:mm:ss.SSSZ\", function () {",
									"            pm.expect(moment(dateLastModified, 'YYYY-MM-DDTHH:mm:ss.SSSZ', true).isValid()).is.true;",
									"\t    });",
									"",
									"    }",
									"  ",
									"    // end date format validation",
									"",
									"\t\t// set class id env variable",
									"\t\tpm.environment.set(\"class_id\", ret0.sourcedId);",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes?offset=0&limit=5000&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5000"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Classes - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var ret0 = undefined;",
									"",
									"//response 200",
									"pm.test(\"Classes Paging success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.classes !== null && ",
									"        data.classes !== undefined && ",
									"        Array.isArray(data.classes)) {",
									"\t\tretArray = data.classes;",
									"\t\ttests[\"classes is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"classes is array\"] = false;",
									"    }",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of classes\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tif (retArray.length >= 0)",
									"\t\t\tret0 = retArray[0]",
									"",
									"\t\tpm.test(\"Class array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"\t}",
									"",
									"\t// validations",
									"\tif (ret0 != undefined) {",
									"",
									"\t\tpm.test(\"Require sourcedId\", function () {",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');",
									"\t\t});",
									"",
									"\t\tpm.test(\"Class Paging Check -- sourcedId repeats on subsequent pages\", function () {",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"class_id\"));",
									"\t\t});\t",
									"\t} // validations",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes?offset=2&limit=1",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Classes - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"",
									"//response 200",
									"pm.test(\"Classes No Records success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"\tif (data.classes !== null && ",
									"        data.classes !== undefined && ",
									"        Array.isArray(data.classes)) {",
									"\t\tretArray = data.classes;",
									"\t\ttests[\"classes is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"classes is array\"] = false;",
									"    }",
									"",
									"\t// array must be empty",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"Class array is empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;",
									"\t\t});",
									"\t}\t",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes?filter=sourcedId='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes"
							],
							"query": [
								{
									"key": "filter",
									"value": "sourcedId='norecords'"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Classes - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;",
									"var retLength = 10;",
									"var moment = require('moment');",
									"",
									"pm.test(\"Classes success response / 200\", function () {",
									"\tpm.expect(responseCode.code).to.be.eql(200);",
									"});",
									"",
									"//if not 200, don't continue",
									"if (responseCode.code === 200) {",
									"",
									"\tvar data = JSON.parse(responseBody);",
									"",
									"    if (data.classes !== null && ",
									"        data.classes !== undefined && ",
									"        Array.isArray(data.classes)) {",
									"\t\tretArray = data.classes;",
									"\t\ttests[\"classes is array\"] = true;",
									"\t} else {",
									"\t\ttests[\"classes is array\"] = false;",
									"    }",
									"",
									"\t// array must exist",
									"\tpm.test(\"Require array of classes\", function () {",
									"\t\tpm.expect(retArray).to.be.an('array');",
									"\t});",
									"",
									"\t// array must have values",
									"\tif (retArray != undefined) {",
									"\t\tpm.test(\"Class array is not empty\", function () {",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;",
									"\t\t});",
									"        if (retArray.length < 10) retLength = retArray.length;",
									"\t}",
									"",
									"",
									"",
									"",
									"    paramModifiedDate = pm.variables.get(\"DeltaDateTime\");",
									"    pm.test(\"environment variable DeltaDateTime must be set\", function() {",
									"        //pm.expect(paramModifiedDate).isValid();",
									"        pm.expect(paramModifiedDate.isNaN);",
									"        pm.expect(paramModifiedDate).to.not.be.eql('');",
									"    });",
									"",
									"        if (paramModifiedDate !== null && paramModifiedDate !== undefined)",
									"        {    ",
									"           \tpm.test(\"environment variable DeltaDateTime must be format: YYYY-MM-DDTHH:mm:ssZ\", function () {",
									"                pm.expect(moment(paramModifiedDate.substring(0,19), 'YYYY-MM-DDTHH:mm:ss', true).isValid()).is.true;",
									"\t\t    });",
									"        }",
									"",
									"    pm.test(\"Returns records only if class.dateLastModified filter less than now\", function () {",
									"        pm.expect(new Date(paramModifiedDate) <= new Date());",
									"    });",
									"",
									"    pm.test(\"Require environment variable DeltaDateTime is format YYYY-MM-DDTHH:mm:ssZ\", function () {",
									"        var testDate = moment(paramModifiedDate);",
									"         pm.expect(testDate.isValid()).is.true;",
									"\t});",
									"if (retLength != undefined && retLength >=0 && retArray != undefined)",
									"{",
									"    for (var i=0; i<retLength; i++) {",
									"\t    var retI = retArray[i];",
									"        if (retI != undefined) {",
									"            pm.test(\"Require delta class.dateLastModified\", function () {",
									"                pm.expect(retI).to.have.property('dateLastModified');",
									"                pm.expect(retI.dateLastModified).to.not.be.eql('');",
									"            });",
									"",
									"            pm.test(\"Require delta class.dateLastModified to be at least filter dateLastModified\", function () {",
									"                pm.expect(new Date(retI.dateLastModified) >= new Date(paramModifiedDate));",
									"            });",
									"        } ",
									"    }",
									"}",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/classes?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"classes"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of classes"
					},
					"response": []
				},
				{
					"name": "Get Enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"var retSchool = undefined;\r",
									"var retClass = undefined;\r",
									"var retUser = undefined;\r",
									"var dateLastModified = undefined;\r",
									"\r",
									"pm.test(\"Enrollments success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"// test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.enrollments !== null && \r",
									"        data.enrollments !== undefined && \r",
									"        Array.isArray(data.enrollments)) {\r",
									"\t\tretArray = data.enrollments;\r",
									"\t\ttests[\"enrollments is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"enrollments is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of User Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"Enrollment array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.role\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('role');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        //validate Role\r",
									"\t\tpm.test(\"Require user enrollment.role.valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.role).to.be.oneOf(['administrator', 'aide', 'guardian', 'parent', 'proctor', 'relative', 'student', 'teacher']);\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require enrollment.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"        // school is a nested object\r",
									"\t\tpm.test(\"Require enrollment.school\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('school');\r",
									"\t\t\tretSchool = ret0.school;\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- schoolSourcedId\r",
									"\t\tpm.test(\"Require enrollment.school.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.school.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retSchool.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- type\r",
									"\t\tpm.test(\"Require enrollment.type\", function () {\r",
									"\t\t\tpm.expect(retSchool).to.have.property('type');\r",
									"\t\t\tpm.expect(retSchool.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require school.enrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retSchool.type).to.be.oneOf(['department', 'school', 'district', 'local', 'state', 'national', 'org']);\r",
									"\t\t});\r",
									"\r",
									"        // class is a nested object\r",
									"\t\tpm.test(\"Require enrollment.class\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('class');\r",
									"\t\t\tretClass = ret0.class;\r",
									"\t\t});\r",
									"\t\t// class is a nested object -- classSourcedId\r",
									"\t\tpm.test(\"Require enrollment.class.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.class.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retClass.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// class is a nested object -- type\r",
									"\t\tpm.test(\"Require enrollment.class.type\", function () {\r",
									"\t\t\tpm.expect(retClass).to.have.property('type');\r",
									"\t\t\tpm.expect(retClass.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate org type\r",
									"\t\tpm.test(\"Require class enrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retClass.type).to.be.oneOf(['class']);\r",
									"\t\t});\r",
									"\r",
									"        // user is a nested object\r",
									"\t\tpm.test(\"Require enrollment.user\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('user');\r",
									"\t\t\tretUser = ret0.user;\r",
									"\t\t});\r",
									"\r",
									"\t\t// user is a nested object -- userSourcedId\r",
									"\t\tpm.test(\"Require enrollment.user.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require enrollment.user.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retUser.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\t// user is a nested object -- type\r",
									"\t\tpm.test(\"Require enrollment.user.type\", function () {\r",
									"\t\t\tpm.expect(retUser).to.have.property('type');\r",
									"\t\t\tpm.expect(retUser.type).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\t// validate user type\r",
									"\t\tpm.test(\"Require enrollment.type valid values\", function () {\r",
									"\t\t\tpm.expect(retUser.type).to.be.oneOf(['user']);\r",
									"\t\t});\r",
									"\r",
									"    // validate dateLastModified format to W3C /  of ISO 8601\r",
									"    pm.test(\"Require dateLastModified\", function () {\r",
									"\t\tpm.expect(ret0).to.have.property('dateLastModified');\r",
									"\t\tpm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"\t});\r",
									" \r",
									"    dateLastModified = ret0.dateLastModified;\r",
									"\r",
									"    if (dateLastModified !== null && dateLastModified !== undefined)\r",
									"    {    \r",
									"   \r",
									"      \tpm.test(\"dateLastModified must be format: YYYY-MM-DDTHH:mm:ss.SSSZ\", function () {\r",
									"            pm.expect(moment(dateLastModified, 'YYYY-MM-DDTHH:mm:ss.SSSZ', true).isValid()).is.true;\r",
									"\t    });\r",
									"\r",
									"    }\r",
									"  \r",
									"    // end date format validation\r",
									"\r",
									"        // set session id env variable for paging test\r",
									"\t\tpm.environment.set(\"enrollment_id\", ret0.sourcedId);\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/enrollments?offset=0&limit=5000&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "5000",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Enrollments - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"\r",
									"pm.test(\"Enrollments success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.enrollments !== null && \r",
									"        data.enrollments !== undefined && \r",
									"        Array.isArray(data.enrollments)) {\r",
									"\t\tretArray = data.enrollments;\r",
									"\t\ttests[\"enrollments is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"enrollments is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of User Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"    // array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"Enrollments array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) { \r",
									"\r",
									"\t\tpm.test(\"Require enrollment.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Enrollments Paging Check -- sourcedId repeats on subsequent pages\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"enrollment_id\"));\r",
									"\t\t});\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/enrollments?offset=2&limit=1",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"enrollments"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Enrollments - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"\r",
									"pm.test(\"Enrollments success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.enrollments !== null && \r",
									"        data.enrollments !== undefined && \r",
									"        Array.isArray(data.enrollments)) {\r",
									"\t\tretArray = data.enrollments;\r",
									"\t\ttests[\"enrollments is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"enrollments is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of User Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\t// array must be empty\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"Enrollments array is empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;\r",
									"\t\t});\r",
									"\t}\t\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/enrollments?filter=sourcedId='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"enrollments"
							],
							"query": [
								{
									"key": "filter",
									"value": "sourcedId='norecords'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Enrollments - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var retLength = 10;\r",
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"Enrollments success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.enrollments !== null && \r",
									"        data.enrollments !== undefined && \r",
									"        Array.isArray(data.enrollments)) {\r",
									"\t\tretArray = data.enrollments;\r",
									"\t\ttests[\"enrollments is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"enrollments is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of Enrollments\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"Enrollment array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"        if (retArray.length < 10) retLength = retArray.length;\r",
									"\t}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    paramModifiedDate = pm.variables.get(\"DeltaDateTime\");\r",
									"    pm.test(\"environment variable DeltaDateTime must be set\", function() {\r",
									"        //pm.expect(paramModifiedDate).isValid();\r",
									"        pm.expect(paramModifiedDate.isNaN);\r",
									"        pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"    });\r",
									"\r",
									"        if (paramModifiedDate !== null && paramModifiedDate !== undefined)\r",
									"        {    \r",
									"           \tpm.test(\"environment variable DeltaDateTime must be format: YYYY-MM-DDTHH:mm:ssZ\", function () {\r",
									"                pm.expect(moment(paramModifiedDate.substring(0,19), 'YYYY-MM-DDTHH:mm:ss', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"    pm.test(\"Returns records only if enrollment.dateLastModified filter less than now\", function () {\r",
									"        pm.expect(new Date(paramModifiedDate) <= new Date());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Require environment variable DeltaDateTime is format YYYY-MM-DDTHH:mm:ssZ\", function () {\r",
									"        var testDate = moment(paramModifiedDate);\r",
									"         pm.expect(testDate.isValid()).is.true;\r",
									"\t});\r",
									"\r",
									"if (retLength != undefined && retLength >=0 && retArray != undefined)\r",
									"{\r",
									"    for (var i=0; i<retLength; i++) {\r",
									"\t    var retI = retArray[i];\r",
									"        if (retI != undefined) {\r",
									"            pm.test(\"Require delta enrollment.dateLastModified\", function () {\r",
									"                pm.expect(retI).to.have.property('dateLastModified');\r",
									"                pm.expect(retI.dateLastModified).to.not.be.eql('');\r",
									"            });\r",
									"\r",
									"            pm.test(\"Require delta enrollment.dateLastModified to be at least filter dateLastModified\", function () {\r",
									"                pm.expect(new Date(retI.dateLastModified) >= new Date(paramModifiedDate));\r",
									"            });\r",
									"        } \r",
									"    }\r",
									"}\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/enrollments?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"enrollments"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"var retOrg = undefined;\r",
									"var dateLastModified = undefined;\r",
									"\r",
									"pm.test(\"Courses success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"// test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.courses !== null && \r",
									"        data.courses !== undefined && \r",
									"        Array.isArray(data.courses)) {\r",
									"\t\tretArray = data.courses;\r",
									"\t\ttests[\"courses is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"courses is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of courses\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"courses array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require course.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require course.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require courses.status\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('status');\r",
									"\t\t\tpm.expect(ret0.status).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Require courses.status valid values\", function () {\r",
									"\t\t\tpm.expect(ret0.status).to.be.oneOf(['active', 'tobedeleted']);\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require courses.title\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('title');\r",
									"\t\t\tpm.expect(ret0.name).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        // org is a nested object\r",
									"\t\tpm.test(\"Require courses.org\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('org');\r",
									"\t\t\tretOrg = ret0.org;\r",
									"\t\t});\r",
									"\r",
									"\t\t// school is a nested object -- schoolSourcedId\r",
									"\t\tpm.test(\"Require courses.org.sourcedId\", function () {\r",
									"\t\t\tpm.expect(retOrg).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(retOrg.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require courses.org.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(retOrg.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"    // validate dateLastModified format to W3C /  of ISO 8601\r",
									"    pm.test(\"Require dateLastModified\", function () {\r",
									"\t\tpm.expect(ret0).to.have.property('dateLastModified');\r",
									"\t\tpm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"\t});\r",
									" \r",
									"    dateLastModified = ret0.dateLastModified;\r",
									"\r",
									"    if (dateLastModified !== null && dateLastModified !== undefined)\r",
									"    {    \r",
									"   \r",
									"      \tpm.test(\"dateLastModified must be format: YYYY-MM-DDTHH:mm:ss.SSSZ\", function () {\r",
									"            pm.expect(moment(dateLastModified, 'YYYY-MM-DDTHH:mm:ss.SSSZ', true).isValid()).is.true;\r",
									"\t    });\r",
									"\r",
									"    }\r",
									"  \r",
									"    // end date format validation\r",
									"\r",
									"        // set course id env variable for paging test\r",
									"\t\tpm.environment.set(\"course_id\", ret0.sourcedId);\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/courses?offset=0&limit=5000&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"courses"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "5000",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Courses - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"\r",
									"pm.test(\"Courses success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.courses !== null && \r",
									"        data.courses !== undefined && \r",
									"        Array.isArray(data.courses)) {\r",
									"\t\tretArray = data.courses;\r",
									"\t\ttests[\"courses is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"courses is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of courses\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"    // array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"course array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) { \r",
									"\r",
									"\t\tpm.test(\"Require course.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"courses Paging Check -- sourcedId repeats on subsequent pages\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"course_id\"));\r",
									"\t\t});\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/courses?offset=2&limit=1",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"courses"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Courses - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"\r",
									"pm.test(\"Courses success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.courses !== null && \r",
									"        data.courses !== undefined && \r",
									"        Array.isArray(data.courses)) {\r",
									"\t\tretArray = data.courses;\r",
									"\t\ttests[\"courses is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"courses is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of courses\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\t// array must be empty\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"courses array is empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;\r",
									"\t\t});\r",
									"\t}\t\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/courses?filter=sourcedId='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"courses"
							],
							"query": [
								{
									"key": "filter",
									"value": "sourcedId='norecords'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Courses - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var retLength = 10;\r",
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"Courses success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.courses !== null && \r",
									"        data.courses !== undefined && \r",
									"        Array.isArray(data.courses)) {\r",
									"\t\tretArray = data.courses;\r",
									"\t\ttests[\"courses is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"courses is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of courses\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"courses array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"        if (retArray.length < 10) retLength = retArray.length;\r",
									"\t}\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									"    paramModifiedDate = pm.variables.get(\"DeltaDateTime\");\r",
									"    pm.test(\"environment variable DeltaDateTime must be set\", function() {\r",
									"        //pm.expect(paramModifiedDate).isValid();\r",
									"        pm.expect(paramModifiedDate.isNaN);\r",
									"        pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"    });\r",
									"\r",
									"        if (paramModifiedDate !== null && paramModifiedDate !== undefined)\r",
									"        {    \r",
									"           \tpm.test(\"environment variable DeltaDateTime must be format: YYYY-MM-DDTHH:mm:ssZ\", function () {\r",
									"                pm.expect(moment(paramModifiedDate.substring(0,19), 'YYYY-MM-DDTHH:mm:ss', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"    pm.test(\"Returns records only if course.dateLastModified filter less than now\", function () {\r",
									"        pm.expect(new Date(paramModifiedDate) <= new Date());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Require environment variable DeltaDateTime is format YYYY-MM-DDTHH:mm:ssZ\", function () {\r",
									"        var testDate = moment(paramModifiedDate);\r",
									"         pm.expect(testDate.isValid()).is.true;\r",
									"\t});\r",
									"\r",
									"if (retLength != undefined && retLength >=0 && retArray != undefined)\r",
									"{\r",
									"    for (var i=0; i<retLength; i++) {\r",
									"\t    var retI = retArray[i];\r",
									"        if (retI != undefined) {\r",
									"            pm.test(\"Require delta course.dateLastModified\", function () {\r",
									"                pm.expect(retI).to.have.property('dateLastModified');\r",
									"                pm.expect(retI.dateLastModified).to.not.be.eql('');\r",
									"            });\r",
									"\r",
									"            pm.test(\"Require delta course.dateLastModified to be at least filter dateLastModified\", function () {\r",
									"                pm.expect(new Date(retI.dateLastModified) >= new Date(paramModifiedDate));\r",
									"            });\r",
									"        } \r",
									"    }\r",
									"}\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/courses?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"courses"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Demographics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"var dateLastModified = undefined;\r",
									"\r",
									"pm.test(\"demographics success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"// test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.demographics !== null && \r",
									"        data.demographics !== undefined && \r",
									"        Array.isArray(data.demographics)) {\r",
									"\t\tretArray = data.demographics;\r",
									"\t\ttests[\"demographics is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"demographics is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of demographics\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"demographics array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require demographics.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require demographics.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"    // validate dateLastModified format to W3C /  of ISO 8601\r",
									"    pm.test(\"Require dateLastModified\", function () {\r",
									"\t\tpm.expect(ret0).to.have.property('dateLastModified');\r",
									"\t\tpm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"\t});\r",
									" \r",
									"    dateLastModified = ret0.dateLastModified;\r",
									"\r",
									"    if (dateLastModified !== null && dateLastModified !== undefined)\r",
									"    {    \r",
									"   \r",
									"      \tpm.test(\"dateLastModified must be format: YYYY-MM-DDTHH:mm:ss.SSSZ\", function () {\r",
									"            pm.expect(moment(dateLastModified, 'YYYY-MM-DDTHH:mm:ss.SSSZ', true).isValid()).is.true;\r",
									"\t    });\r",
									"\r",
									"    }\r",
									"  \r",
									"    // end date format validation\r",
									"        \r",
									"        // set course id env variable for paging test\r",
									"\t\tpm.environment.set(\"demographics_id\", ret0.sourcedId);\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/demographics?offset=0&limit=5000&filter=status='active'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"demographics"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The index of the first record to return. (zero indexed)"
								},
								{
									"key": "limit",
									"value": "5000",
									"description": "Number of results to return from selected index"
								},
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Demographics - Paging Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"\r",
									"pm.test(\"Demographics success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.demographics !== null && \r",
									"        data.demographics !== undefined && \r",
									"        Array.isArray(data.demographics)) {\r",
									"\t\tretArray = data.demographics;\r",
									"\t\ttests[\"demographics is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"demographics is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of demographics\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"    // array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"demographics array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) { \r",
									"\r",
									"\t\tpm.test(\"Require demographics.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"demographics Paging Check -- sourcedId repeats on subsequent pages\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql(pm.variables.get(\"demographics_id\"));\r",
									"\t\t});\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/demographics?offset=2&limit=1",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"demographics"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Demographics - No Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"\r",
									"pm.test(\"Demographics success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.demographics !== null && \r",
									"        data.demographics !== undefined && \r",
									"        Array.isArray(data.demographics)) {\r",
									"\t\tretArray = data.demographics;\r",
									"\t\ttests[\"demographics is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"demographics is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of User demographics\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\t// array must be empty\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"demographics array is empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.empty;\r",
									"\t\t});\r",
									"\t}\t\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/demographics?filter=sourcedId='norecords'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"demographics"
							],
							"query": [
								{
									"key": "filter",
									"value": "sourcedId='norecords'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Demographics - Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var retArray = undefined;\r",
									"var retLength = 10;\r",
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"demographics success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.demographics !== null && \r",
									"        data.demographics !== undefined && \r",
									"        Array.isArray(data.demographics)) {\r",
									"\t\tretArray = data.demographics;\r",
									"\t\ttests[\"demographics is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"demographics is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of demographics\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tpm.test(\"demographics array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"        if (retArray.length < 10) retLength = retArray.length;\r",
									"\t}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    paramModifiedDate = pm.variables.get(\"DeltaDateTime\");\r",
									"    pm.test(\"environment variable DeltaDateTime must be set\", function() {\r",
									"        //pm.expect(paramModifiedDate).isValid();\r",
									"        pm.expect(paramModifiedDate.isNaN);\r",
									"        pm.expect(paramModifiedDate).to.not.be.eql('');\r",
									"    });\r",
									"\r",
									"        if (paramModifiedDate !== null && paramModifiedDate !== undefined)\r",
									"        {    \r",
									"           \tpm.test(\"environment variable DeltaDateTime must be format: YYYY-MM-DDTHH:mm:ssZ\", function () {\r",
									"                pm.expect(moment(paramModifiedDate.substring(0,19), 'YYYY-MM-DDTHH:mm:ss', true).isValid()).is.true;\r",
									"\t\t    });\r",
									"        }\r",
									"\r",
									"    pm.test(\"Returns records only if demographics.dateLastModified filter less than now\", function () {\r",
									"        pm.expect(new Date(paramModifiedDate) <= new Date());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Require environment variable DeltaDateTime is format YYYY-MM-DDTHH:mm:ssZ\", function () {\r",
									"        var testDate = moment(paramModifiedDate);\r",
									"         pm.expect(testDate.isValid()).is.true;\r",
									"\t});\r",
									"\r",
									"if (retLength != undefined && retLength >=0 && retArray != undefined)\r",
									"{\r",
									"    for (var i=0; i<retLength; i++) {\r",
									"\t    var retI = retArray[i];\r",
									"        if (retI != undefined) {\r",
									"            pm.test(\"Require delta demographics.dateLastModified\", function () {\r",
									"                pm.expect(retI).to.have.property('dateLastModified');\r",
									"                pm.expect(retI.dateLastModified).to.not.be.eql('');\r",
									"            });\r",
									"\r",
									"            pm.test(\"Require delta demographics.dateLastModified to be at least filter dateLastModified\", function () {\r",
									"                pm.expect(new Date(retI.dateLastModified) >= new Date(paramModifiedDate));\r",
									"            });\r",
									"        } \r",
									"    }\r",
									"}\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/demographics?filter=dateLastModified>'{{DeltaDateTime}}'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"demographics"
							],
							"query": [
								{
									"key": "filter",
									"value": "dateLastModified>'{{DeltaDateTime}}'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Users - Contact (optional)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//NOTE:  If your SIS uses a role other than guardian, please substitute one of the following in URI above:\r",
									"//       parent | guardian | relative \r",
									"\r",
									"// from spec:  Note that these are typically from the point of view of the student - so a student will link to \r",
									"//     its parents (via the agent attribute). The reverse view MUST also be modeled, so for example, a user of \r",
									"//     role \"parent\" MUST have agents that are of type \"student\".\r",
									"\r",
									"\r",
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"user (guardian) success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"// test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"X-Total-Count header is present\", () => {\r",
									"  pm.response.to.have.header(\"X-Total-Count\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"\tif (data.users !== null && \r",
									"        data.users !== undefined && \r",
									"        Array.isArray(data.users)) {\r",
									"\t\tretArray = data.users;\r",
									"\t\ttests[\"users (guardians) is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"users (guardians) is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array must exist\r",
									"\tpm.test(\"Require array of users\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"users array is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\t}\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require users.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require users.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require guardian.dateLastModified\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('dateLastModified');\r",
									"\t\t\tpm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\r",
									"// get array of agents \r",
									"\r",
									"    if (ret0.agents !== null && \r",
									"        ret0.agents !== undefined && \r",
									"        Array.isArray(ret0.agents)) {\r",
									"\t\tretArray = ret0.agents;\r",
									"\t\ttests[\"users agents is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"users (agents is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array of agents must exist\r",
									"\tpm.test(\"Require array of users\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"array of agents is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\r",
									"// get agent sourcedId\r",
									"        pm.test(\"Require agent.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"    }\r",
									"              \r",
									"        // set  student id env variable so we can check reverse\r",
									"\t\tpm.environment.set(\"student_id\", ret0.sourcedId);\t\t\r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users?filter=role='guardian'",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "role='guardian'"
								}
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				},
				{
					"name": "Get Users - Student of Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// from spec:  Note that these are typically from the point of view of the student - so a student will link to \r",
									"//     its parents (via the agent attribute). The reverse view MUST also be modeled, so for example, a user of \r",
									"//     role \"parent\" MUST have agents that are of type \"student\".\r",
									"\r",
									"\r",
									"var retArray = undefined;\r",
									"var ret0 = undefined;\r",
									"var moment = require('moment');\r",
									"var maxResponseTime = 30000; //30 seconds\r",
									"\r",
									"pm.test(\"user (student) success response/ 200\", function () {\r",
									"\tpm.expect(responseCode.code).to.be.eql(200);\r",
									"});\r",
									"\r",
									"// test content-type\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + (maxResponseTime/1000) + \" seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(maxResponseTime);\r",
									"});\r",
									"\r",
									"//if not 200, don't continue\r",
									"if (responseCode.code === 200) {\r",
									"\r",
									"\tvar data = JSON.parse(responseBody);\r",
									"\r",
									"// get the array \r",
									"\tswitch (true) {\r",
									"\r",
									"\t\tcase (data.user !== null && data.user !== undefined):\r",
									"\t\t\t{\r",
									"\t\t\t\tret0 = data.user;\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\r",
									"\r",
									"\t\tdefault:\r",
									"\r",
									"\t} // switch\r",
									"\r",
									"\tpm.test(\"Require object of user\", function () {\r",
									"\t\tpm.expect(ret0).to.be.an('object');\r",
									"\t});\r",
									"\r",
									"\t// validations\r",
									"\tif (ret0 != undefined) {\r",
									"\r",
									"\t\tpm.test(\"Require users.sourcedId\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('sourcedId');\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require users.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require users.role to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.role).to.be.a('string');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require users.role to be 'student'\", function () {\r",
									"\t\t\tpm.expect(ret0.role).to.be.eq('student');\r",
									"\t\t});\r",
									"\r",
									"        pm.test(\"Require user.dateLastModified\", function () {\r",
									"\t\t\tpm.expect(ret0).to.have.property('dateLastModified');\r",
									"\t\t\tpm.expect(ret0.dateLastModified).to.not.be.eql('');\r",
									"\t\t});\r",
									"\r",
									"\r",
									"// get array of agents \r",
									"// from spec:  Note that these are typically from the point of view of the student - so a student will link to \r",
									"//     its parents (via the agent attribute). The reverse view MUST also be modeled, so for example, a user of \r",
									"//     role \"parent\" MUST have agents that are of type \"student\".\r",
									"\r",
									"    if (ret0.agents !== null && \r",
									"        ret0.agents !== undefined && \r",
									"        Array.isArray(ret0.agents)) {\r",
									"\t\tretArray = ret0.agents;\r",
									"\t\ttests[\"users agents is array\"] = true;\r",
									"\t} else {\r",
									"\t\ttests[\"users (agents is array\"] = false;\r",
									"\t}\r",
									"\r",
									"\t// array of agents must exist\r",
									"\tpm.test(\"Require array of users\", function () {\r",
									"\t\tpm.expect(retArray).to.be.an('array');\r",
									"\t});\r",
									"\r",
									"\t// array must have values\r",
									"\tif (retArray != undefined) {\r",
									"\t\tif (retArray.length >= 0)\r",
									"\t\t\tret0 = retArray[0]\r",
									"\r",
									"\t\tpm.test(\"array of agents is not empty\", function () {\r",
									"\t\t\tpm.expect(retArray).to.be.an('array').that.is.not.empty;\r",
									"\t\t});\r",
									"\r",
									"// get agent sourcedId\r",
									"    if (ret0 != undefined) {\r",
									"        pm.test(\"Require agent.sourcedId to be string\", function () {\r",
									"\t\t\tpm.expect(ret0.sourcedId).to.be.a('string');\r",
									"\t\t})};\r",
									"    }\r",
									"             \r",
									"        \r",
									"\t} // validations\r",
									"} // 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{OneRosterHost}}/ims/oneroster/v1p1/users/a1",
							"host": [
								"{{OneRosterHost}}"
							],
							"path": [
								"ims",
								"oneroster",
								"v1p1",
								"users",
								"a1"
							]
						},
						"description": "Gets a page of enrollments"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{OAuth2AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "school_id",
			"value": "",
			"disabled": true
		},
		{
			"key": "class_id",
			"value": "",
			"disabled": true
		},
		{
			"key": "student_id",
			"value": "",
			"disabled": true
		},
		{
			"key": "teacher_id",
			"value": "",
			"disabled": true
		}
	]
}
